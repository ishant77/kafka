[2023-11-28 15:19:09,994] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:19:10,035] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2023-11-28 15:19:10,042] INFO [Controller id=0] Creating FeatureZNode at path: /feature with contents: FeatureZNode(2,Enabled,Map()) (kafka.controller.KafkaController)
[2023-11-28 15:19:10,087] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2023-11-28 15:19:10,091] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-11-28 15:19:10,095] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-11-28 15:19:10,099] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2023-11-28 15:19:10,118] INFO [Controller id=0] Initialized broker epochs cache: HashMap(0 -> 25) (kafka.controller.KafkaController)
[2023-11-28 15:19:10,125] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2023-11-28 15:19:10,133] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-11-28 15:19:10,144] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-11-28 15:19:10,146] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2023-11-28 15:19:10,148] INFO [Controller id=0] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-11-28 15:19:10,148] INFO [Controller id=0] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-11-28 15:19:10,148] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-11-28 15:19:10,151] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-11-28 15:19:10,151] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2023-11-28 15:19:10,152] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-11-28 15:19:10,152] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)
[2023-11-28 15:19:10,153] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2023-11-28 15:19:10,168] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:19:10,169] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:19:10,178] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:19:10,180] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:19:10,180] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:19:10,181] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:19:10,182] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-28 15:19:10,190] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:19:10,191] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2023-11-28 15:19:10,200] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-11-28 15:19:10,200] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-11-28 15:19:10,200] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-11-28 15:19:10,201] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-11-28 15:19:10,202] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-11-28 15:19:10,219] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-11-28 15:19:15,236] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-28 15:19:15,236] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-28 15:19:35,146] INFO [Controller id=0] Newly added brokers: 1, deleted brokers: , bounced brokers: , all live brokers: 0,1 (kafka.controller.KafkaController)
[2023-11-28 15:19:35,146] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-11-28 15:19:35,152] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-11-28 15:19:35,154] INFO [Controller id=0] New broker startup callback for 1 (kafka.controller.KafkaController)
[2023-11-28 15:19:35,158] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-28 15:19:35,160] DEBUG [Controller id=0] Register BrokerModifications handler for List(1) (kafka.controller.KafkaController)
[2023-11-28 15:19:35,163] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 25, 1 -> 45) (kafka.controller.KafkaController)
[2023-11-28 15:19:35,203] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:19:35,217] DEBUG [Controller id=1] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-11-28 15:19:45,815] INFO [Controller id=0] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-11-28 15:19:45,815] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-11-28 15:19:45,820] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-11-28 15:19:45,820] INFO [Controller id=0] New broker startup callback for 2 (kafka.controller.KafkaController)
[2023-11-28 15:19:45,821] DEBUG [Controller id=0] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2023-11-28 15:19:45,824] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 25, 1 -> 45, 2 -> 61) (kafka.controller.KafkaController)
[2023-11-28 15:19:45,824] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-28 15:19:45,883] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:19:45,897] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-11-28 15:19:46,257] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(__consumer_offsets,Some(EBwwDIJ0ReG_JneW_zuZAA),HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-11-28 15:19:46,258] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2023-11-28 15:21:08,841] INFO [Controller id=0] Shutting down broker 2 (kafka.controller.KafkaController)
[2023-11-28 15:21:08,842] DEBUG [Controller id=0] All shutting down brokers: 2 (kafka.controller.KafkaController)
[2023-11-28 15:21:08,842] DEBUG [Controller id=0] Live brokers: 0,1 (kafka.controller.KafkaController)
[2023-11-28 15:21:08,845] TRACE [Controller id=0] All leaders = __consumer_offsets-13 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-46 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-9 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-42 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-21 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-17 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-30 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-26 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-5 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-38 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-1 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-34 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-16 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-45 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-12 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-41 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-24 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-20 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-49 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-0 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-29 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-25 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-8 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-37 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-4 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-33 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-15 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-48 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-11 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-44 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-23 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-19 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-32 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-28 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-7 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-40 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-3 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-36 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-47 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-14 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-43 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-10 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-22 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-18 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-31 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-27 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-39 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-6 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-35 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-2 -> (Leader:2,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1) (kafka.controller.KafkaController)
[2023-11-28 15:21:09,014] INFO [ControllerEventThread controllerId=2] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:21:09,015] INFO [ControllerEventThread controllerId=2] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:21:09,015] INFO [ControllerEventThread controllerId=2] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:21:09,015] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2023-11-28 15:21:09,016] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-11-28 15:21:09,016] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:21:09,017] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:21:09,018] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2023-11-28 15:21:09,029] INFO [Controller id=0] Newly added brokers: , deleted brokers: 2, bounced brokers: , all live brokers: 0,1 (kafka.controller.KafkaController)
[2023-11-28 15:21:09,030] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2023-11-28 15:21:09,031] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-28 15:21:09,031] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2023-11-28 15:21:09,036] INFO [Controller id=0] Broker failure callback for 2 (kafka.controller.KafkaController)
[2023-11-28 15:21:09,037] INFO [Controller id=0] Removed 2 from list of shutting down brokers. (kafka.controller.KafkaController)
[2023-11-28 15:21:09,118] DEBUG [Controller id=0] Unregister BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2023-11-28 15:21:09,119] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 25, 1 -> 45) (kafka.controller.KafkaController)
[2023-11-28 15:21:18,100] INFO [Controller id=0] Shutting down broker 1 (kafka.controller.KafkaController)
[2023-11-28 15:21:18,100] DEBUG [Controller id=0] All shutting down brokers: 1 (kafka.controller.KafkaController)
[2023-11-28 15:21:18,100] DEBUG [Controller id=0] Live brokers: 0 (kafka.controller.KafkaController)
[2023-11-28 15:21:18,101] TRACE [Controller id=0] All leaders = __consumer_offsets-13 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-46 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-9 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-42 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-21 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-17 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-30 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-26 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-5 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-38 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-1 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-34 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-16 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-45 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-12 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-41 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-24 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-20 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-49 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-0 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-29 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-25 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-8 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-37 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-4 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-33 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-15 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-48 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-11 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-44 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-23 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-19 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-32 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-28 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-7 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-40 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-3 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-36 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-47 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-14 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-43 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-10 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-22 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-18 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-31 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-27 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-39 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-6 -> (Leader:1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-35 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-2 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1) (kafka.controller.KafkaController)
[2023-11-28 15:21:18,281] INFO [ControllerEventThread controllerId=1] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:21:18,282] INFO [ControllerEventThread controllerId=1] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:21:18,282] INFO [ControllerEventThread controllerId=1] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:21:18,282] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2023-11-28 15:21:18,283] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-11-28 15:21:18,284] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:21:18,284] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:21:18,285] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2023-11-28 15:21:18,296] INFO [Controller id=0] Newly added brokers: , deleted brokers: 1, bounced brokers: , all live brokers: 0 (kafka.controller.KafkaController)
[2023-11-28 15:21:18,296] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2023-11-28 15:21:18,296] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2023-11-28 15:21:18,296] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-28 15:21:18,299] INFO [Controller id=0] Broker failure callback for 1 (kafka.controller.KafkaController)
[2023-11-28 15:21:18,299] INFO [Controller id=0] Removed 1 from list of shutting down brokers. (kafka.controller.KafkaController)
[2023-11-28 15:21:18,350] DEBUG [Controller id=0] Unregister BrokerModifications handler for List(1) (kafka.controller.KafkaController)
[2023-11-28 15:21:18,350] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 25) (kafka.controller.KafkaController)
[2023-11-28 15:21:25,639] INFO [Controller id=0] Shutting down broker 0 (kafka.controller.KafkaController)
[2023-11-28 15:21:25,640] DEBUG [Controller id=0] All shutting down brokers: 0 (kafka.controller.KafkaController)
[2023-11-28 15:21:25,640] DEBUG [Controller id=0] Live brokers:  (kafka.controller.KafkaController)
[2023-11-28 15:21:25,640] TRACE [Controller id=0] All leaders = __consumer_offsets-13 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-46 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-9 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-42 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-21 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-17 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-30 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-26 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-5 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-38 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-1 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-34 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-16 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-45 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-12 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-41 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-24 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-20 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-49 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-0 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-29 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-25 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-8 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-37 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-4 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-33 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-15 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-48 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-11 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-44 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-23 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-19 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-32 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-28 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-7 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-40 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-3 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-36 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-47 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-14 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-43 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-10 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-22 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-18 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-31 -> (Leader:0,ISR:0,LeaderRecoveryState:RECOVERED,LeaderEpoch:0,ZkVersion:0,ControllerEpoch:1),__consumer_offsets-27 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-39 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-6 -> (Leader:-1,ISR:1,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-35 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1),__consumer_offsets-2 -> (Leader:-1,ISR:2,LeaderRecoveryState:RECOVERED,LeaderEpoch:1,ZkVersion:1,ControllerEpoch:1) (kafka.controller.KafkaController)
[2023-11-28 15:21:25,806] INFO [ControllerEventThread controllerId=0] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:21:25,806] INFO [ControllerEventThread controllerId=0] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:21:25,806] INFO [ControllerEventThread controllerId=0] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:21:25,807] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2023-11-28 15:21:25,808] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2023-11-28 15:21:25,809] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:21:25,810] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:21:25,810] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2023-11-28 15:21:25,811] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2023-11-28 15:21:25,811] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-28 15:21:25,813] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2023-11-28 15:21:54,950] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:21:54,982] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 2 and epoch zk version is now 2 (kafka.controller.KafkaController)
[2023-11-28 15:21:54,986] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2023-11-28 15:21:54,994] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-11-28 15:21:55,000] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-11-28 15:21:55,006] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2023-11-28 15:21:55,039] INFO [Controller id=0] Initialized broker epochs cache: HashMap(0 -> 217) (kafka.controller.KafkaController)
[2023-11-28 15:21:55,055] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2023-11-28 15:21:55,108] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-11-28 15:21:55,118] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-11-28 15:21:55,123] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2023-11-28 15:21:55,124] INFO [Controller id=0] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-11-28 15:21:55,125] INFO [Controller id=0] Current list of topics in the cluster: HashSet(__consumer_offsets) (kafka.controller.KafkaController)
[2023-11-28 15:21:55,127] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-11-28 15:21:55,134] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-11-28 15:21:55,135] INFO [Controller id=0] List of topics ineligible for deletion: __consumer_offsets (kafka.controller.KafkaController)
[2023-11-28 15:21:55,136] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-11-28 15:21:55,137] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(__consumer_offsets) (kafka.controller.TopicDeletionManager)
[2023-11-28 15:21:55,141] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2023-11-28 15:21:55,156] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:21:55,169] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:21:55,173] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-28 15:21:55,214] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:21:55,327] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:21:55,328] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:21:55,333] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:21:55,407] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OnlinePartition, __consumer_offsets-46 -> OnlinePartition, __consumer_offsets-9 -> OfflinePartition, __consumer_offsets-42 -> OfflinePartition, __consumer_offsets-21 -> OfflinePartition, __consumer_offsets-17 -> OfflinePartition, __consumer_offsets-30 -> OfflinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-5 -> OfflinePartition, __consumer_offsets-38 -> OfflinePartition, __consumer_offsets-1 -> OnlinePartition, __consumer_offsets-34 -> OnlinePartition, __consumer_offsets-16 -> OnlinePartition, __consumer_offsets-45 -> OfflinePartition, __consumer_offsets-12 -> OfflinePartition, __consumer_offsets-41 -> OfflinePartition, __consumer_offsets-24 -> OfflinePartition, __consumer_offsets-20 -> OfflinePartition, __consumer_offsets-49 -> OnlinePartition, __consumer_offsets-0 -> OfflinePartition, __consumer_offsets-29 -> OfflinePartition, __consumer_offsets-25 -> OnlinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-37 -> OnlinePartition, __consumer_offsets-4 -> OnlinePartition, __consumer_offsets-33 -> OfflinePartition, __consumer_offsets-15 -> OfflinePartition, __consumer_offsets-48 -> OfflinePartition, __consumer_offsets-11 -> OfflinePartition, __consumer_offsets-44 -> OfflinePartition, __consumer_offsets-23 -> OfflinePartition, __consumer_offsets-19 -> OnlinePartition, __consumer_offsets-32 -> OfflinePartition, __consumer_offsets-28 -> OnlinePartition, __consumer_offsets-7 -> OnlinePartition, __consumer_offsets-40 -> OnlinePartition, __consumer_offsets-3 -> OfflinePartition, __consumer_offsets-36 -> OfflinePartition, __consumer_offsets-47 -> OfflinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-43 -> OnlinePartition, __consumer_offsets-10 -> OnlinePartition, __consumer_offsets-22 -> OnlinePartition, __consumer_offsets-18 -> OfflinePartition, __consumer_offsets-31 -> OnlinePartition, __consumer_offsets-27 -> OfflinePartition, __consumer_offsets-39 -> OfflinePartition, __consumer_offsets-6 -> OfflinePartition, __consumer_offsets-35 -> OfflinePartition, __consumer_offsets-2 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:21:55,408] INFO [Controller id=0] Ready to serve as the new controller with epoch 2 (kafka.controller.KafkaController)
[2023-11-28 15:21:55,417] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-11-28 15:21:55,418] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-11-28 15:21:55,418] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-11-28 15:21:55,418] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-11-28 15:21:55,420] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-11-28 15:21:55,436] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-11-28 15:22:00,441] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-28 15:22:00,442] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-28 15:22:00,447] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-28 15:22:00,448] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-28 15:22:00,448] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap(__consumer_offsets-30 -> List(1), __consumer_offsets-21 -> List(1), __consumer_offsets-33 -> List(1), __consumer_offsets-36 -> List(1), __consumer_offsets-48 -> List(1), __consumer_offsets-6 -> List(1), __consumer_offsets-0 -> List(1), __consumer_offsets-45 -> List(1), __consumer_offsets-27 -> List(1), __consumer_offsets-9 -> List(1), __consumer_offsets-42 -> List(1), __consumer_offsets-3 -> List(1), __consumer_offsets-18 -> List(1), __consumer_offsets-15 -> List(1), __consumer_offsets-24 -> List(1), __consumer_offsets-39 -> List(1), __consumer_offsets-12 -> List(1)) (kafka.controller.KafkaController)
[2023-11-28 15:22:00,448] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 1.0 (kafka.controller.KafkaController)
[2023-11-28 15:22:00,449] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-11-28 15:22:00,450] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap(__consumer_offsets-8 -> List(2), __consumer_offsets-35 -> List(2), __consumer_offsets-47 -> List(2), __consumer_offsets-38 -> List(2), __consumer_offsets-17 -> List(2), __consumer_offsets-11 -> List(2), __consumer_offsets-29 -> List(2), __consumer_offsets-32 -> List(2), __consumer_offsets-41 -> List(2), __consumer_offsets-23 -> List(2), __consumer_offsets-2 -> List(2), __consumer_offsets-14 -> List(2), __consumer_offsets-20 -> List(2), __consumer_offsets-44 -> List(2), __consumer_offsets-5 -> List(2), __consumer_offsets-26 -> List(2)) (kafka.controller.KafkaController)
[2023-11-28 15:22:00,450] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 1.0 (kafka.controller.KafkaController)
[2023-11-28 15:22:00,450] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-11-28 15:22:09,345] INFO [Controller id=0] Newly added brokers: 1, deleted brokers: , bounced brokers: , all live brokers: 0,1 (kafka.controller.KafkaController)
[2023-11-28 15:22:09,345] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-11-28 15:22:09,350] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-11-28 15:22:09,352] INFO [Controller id=0] New broker startup callback for 1 (kafka.controller.KafkaController)
[2023-11-28 15:22:09,356] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-28 15:22:09,397] DEBUG [Controller id=0] Register BrokerModifications handler for List(1) (kafka.controller.KafkaController)
[2023-11-28 15:22:09,399] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 217, 1 -> 268) (kafka.controller.KafkaController)
[2023-11-28 15:22:09,420] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:22:09,438] DEBUG [Controller id=1] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-11-28 15:22:18,956] INFO [Controller id=0] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-11-28 15:22:18,956] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-11-28 15:22:18,962] INFO [Controller id=0] New broker startup callback for 2 (kafka.controller.KafkaController)
[2023-11-28 15:22:18,962] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-11-28 15:22:18,967] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-28 15:22:19,005] DEBUG [Controller id=0] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2023-11-28 15:22:19,007] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 217, 1 -> 268, 2 -> 301) (kafka.controller.KafkaController)
[2023-11-28 15:22:19,039] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-11-28 15:22:19,060] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-11-28 15:23:31,559] INFO [Controller id=0] New topics: [Set(ordersTopic)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(ordersTopic,Some(JNAeffNIQQWAPgHTaBUSvA),Map(ordersTopic-0 -> ReplicaAssignment(replicas=0,1,2, addingReplicas=, removingReplicas=), ordersTopic-1 -> ReplicaAssignment(replicas=2,0,1, addingReplicas=, removingReplicas=), ordersTopic-2 -> ReplicaAssignment(replicas=1,2,0, addingReplicas=, removingReplicas=), ordersTopic-3 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-11-28 15:23:31,562] INFO [Controller id=0] New partition creation callback for ordersTopic-0,ordersTopic-1,ordersTopic-2,ordersTopic-3 (kafka.controller.KafkaController)
[2023-11-28 15:23:31,595] INFO [Controller id=0] New topics: [Set(failureTopic)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(failureTopic,Some(Szy9wbL6QHWes-xWAREW-g),Map(failureTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=), failureTopic-1 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=), failureTopic-2 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=), failureTopic-3 -> ReplicaAssignment(replicas=1,2,0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-11-28 15:23:31,595] INFO [Controller id=0] New partition creation callback for failureTopic-0,failureTopic-1,failureTopic-2,failureTopic-3 (kafka.controller.KafkaController)
[2023-11-28 15:25:17,655] DEBUG [Controller id=0] There is no producerId block yet (Zk path version 0), creating the first block (kafka.controller.KafkaController)
[2023-11-28 15:25:17,660] INFO [Controller id=0] Acquired new producerId block ProducerIdsBlock(assignedBrokerId=0, firstProducerId=0, size=1000) by writing to Zk with path version 1 (kafka.controller.KafkaController)
[2023-11-28 15:25:26,042] DEBUG [Controller id=0] Read current producerId block ProducerIdsBlock(assignedBrokerId=0, firstProducerId=0, size=1000), Zk path version 1 (kafka.controller.KafkaController)
[2023-11-28 15:25:26,046] INFO [Controller id=0] Acquired new producerId block ProducerIdsBlock(assignedBrokerId=2, firstProducerId=1000, size=1000) by writing to Zk with path version 2 (kafka.controller.KafkaController)
[2023-11-28 15:25:26,261] DEBUG [Controller id=0] Read current producerId block ProducerIdsBlock(assignedBrokerId=2, firstProducerId=1000, size=1000), Zk path version 2 (kafka.controller.KafkaController)
[2023-11-28 15:25:26,267] INFO [Controller id=0] Acquired new producerId block ProducerIdsBlock(assignedBrokerId=1, firstProducerId=2000, size=1000) by writing to Zk with path version 3 (kafka.controller.KafkaController)
[2023-11-28 15:27:00,456] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-28 15:27:00,457] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-28 15:27:00,458] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-28 15:27:00,458] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-28 15:27:00,458] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-28 15:27:00,458] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-28 15:27:00,459] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-28 15:27:00,459] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-28 15:55:12,861] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2023-11-28 15:55:12,864] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-11-28 15:55:12,865] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:55:12,866] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:55:12,868] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2023-11-28 15:55:12,940] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 3 and epoch zk version is now 3 (kafka.controller.KafkaController)
[2023-11-28 15:55:12,942] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2023-11-28 15:55:12,946] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-11-28 15:55:12,950] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-11-28 15:55:12,957] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2023-11-28 15:55:13,000] INFO [Controller id=2] Initialized broker epochs cache: HashMap(2 -> 349) (kafka.controller.KafkaController)
[2023-11-28 15:55:13,018] DEBUG [Controller id=2] Register BrokerModifications handler for Set(2) (kafka.controller.KafkaController)
[2023-11-28 15:55:13,056] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-11-28 15:55:13,063] INFO [Controller id=2] Currently active brokers in the cluster: Set(2) (kafka.controller.KafkaController)
[2023-11-28 15:55:13,063] INFO [Controller id=2] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-11-28 15:55:13,064] INFO [Controller id=2] Current list of topics in the cluster: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.KafkaController)
[2023-11-28 15:55:13,064] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-11-28 15:55:13,070] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-11-28 15:55:13,070] INFO [Controller id=2] List of topics ineligible for deletion: ordersTopic,__consumer_offsets,failureTopic (kafka.controller.KafkaController)
[2023-11-28 15:55:13,070] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-11-28 15:55:13,071] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.TopicDeletionManager)
[2023-11-28 15:55:13,071] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2023-11-28 15:55:13,072] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,080] INFO [RequestSendThread controllerId=2] Controller 2 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,081] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:55:13,088] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:55:13,113] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:55:13,206] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=2,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=2,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=0,Replica=1] -> OfflineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:55:13,207] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:55:13,211] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:55:13,242] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2023-11-28 15:55:13,243] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2023-11-28 15:55:13,246] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:55:13,247] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:55:13,248] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,250] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,250] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,258] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,263] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,264] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,267] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,268] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,268] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,272] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2023-11-28 15:55:13,274] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2023-11-28 15:55:13,275] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-11-28 15:55:13,276] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:55:13,277] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-28 15:55:13,279] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2023-11-28 15:55:13,295] DEBUG [Controller id=0] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-11-28 15:55:13,309] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OfflinePartition, __consumer_offsets-46 -> OfflinePartition, __consumer_offsets-9 -> OfflinePartition, __consumer_offsets-42 -> OfflinePartition, __consumer_offsets-21 -> OfflinePartition, ordersTopic-0 -> OnlinePartition, failureTopic-0 -> OnlinePartition, __consumer_offsets-17 -> OnlinePartition, __consumer_offsets-30 -> OfflinePartition, __consumer_offsets-26 -> OnlinePartition, __consumer_offsets-5 -> OnlinePartition, __consumer_offsets-38 -> OnlinePartition, __consumer_offsets-1 -> OfflinePartition, __consumer_offsets-34 -> OfflinePartition, __consumer_offsets-16 -> OfflinePartition, __consumer_offsets-45 -> OfflinePartition, __consumer_offsets-12 -> OfflinePartition, __consumer_offsets-41 -> OnlinePartition, __consumer_offsets-24 -> OfflinePartition, ordersTopic-1 -> OnlinePartition, __consumer_offsets-20 -> OnlinePartition, __consumer_offsets-49 -> OfflinePartition, failureTopic-1 -> OnlinePartition, __consumer_offsets-0 -> OfflinePartition, __consumer_offsets-29 -> OnlinePartition, __consumer_offsets-25 -> OfflinePartition, __consumer_offsets-8 -> OnlinePartition, __consumer_offsets-37 -> OfflinePartition, __consumer_offsets-4 -> OfflinePartition, __consumer_offsets-33 -> OfflinePartition, __consumer_offsets-15 -> OfflinePartition, __consumer_offsets-48 -> OfflinePartition, __consumer_offsets-11 -> OnlinePartition, __consumer_offsets-44 -> OnlinePartition, __consumer_offsets-23 -> OnlinePartition, __consumer_offsets-19 -> OfflinePartition, ordersTopic-2 -> OnlinePartition, failureTopic-2 -> OnlinePartition, __consumer_offsets-32 -> OnlinePartition, __consumer_offsets-28 -> OfflinePartition, __consumer_offsets-7 -> OfflinePartition, __consumer_offsets-40 -> OfflinePartition, __consumer_offsets-3 -> OfflinePartition, __consumer_offsets-36 -> OfflinePartition, __consumer_offsets-47 -> OnlinePartition, __consumer_offsets-14 -> OnlinePartition, __consumer_offsets-43 -> OfflinePartition, __consumer_offsets-10 -> OfflinePartition, failureTopic-3 -> OnlinePartition, __consumer_offsets-22 -> OfflinePartition, ordersTopic-3 -> OnlinePartition, __consumer_offsets-18 -> OfflinePartition, __consumer_offsets-31 -> OfflinePartition, __consumer_offsets-27 -> OfflinePartition, __consumer_offsets-39 -> OfflinePartition, __consumer_offsets-6 -> OfflinePartition, __consumer_offsets-35 -> OnlinePartition, __consumer_offsets-2 -> OnlinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-11-28 15:55:13,310] INFO [Controller id=2] Ready to serve as the new controller with epoch 3 (kafka.controller.KafkaController)
[2023-11-28 15:55:13,317] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-11-28 15:55:13,318] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-11-28 15:55:13,318] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-11-28 15:55:13,319] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-11-28 15:55:13,327] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-11-28 15:55:13,343] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-11-28 15:55:13,343] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-11-28 15:55:13,366] INFO [Controller id=2] Newly added brokers: 0,1, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-11-28 15:55:13,367] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-11-28 15:55:13,405] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-11-28 15:55:13,405] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,411] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,414] INFO [Controller id=2] New broker startup callback for 0,1 (kafka.controller.KafkaController)
[2023-11-28 15:55:13,418] INFO [RequestSendThread controllerId=2] Controller 2 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,418] INFO [RequestSendThread controllerId=2] Controller 2 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-28 15:55:13,828] DEBUG [Controller id=2] Register BrokerModifications handler for List(0, 1) (kafka.controller.KafkaController)
[2023-11-28 15:55:13,883] INFO [Controller id=2] Updated broker epochs cache: HashMap(0 -> 408, 1 -> 410, 2 -> 349) (kafka.controller.KafkaController)
[2023-11-28 15:55:13,971] DEBUG [Controller id=2] Updating ISRs for partitions: Set(failureTopic-3, ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-1, ordersTopic-3, failureTopic-2). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,027] DEBUG [Controller id=2] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=2, leaderEpoch=3, isr=List(2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=4). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,027] DEBUG [Controller id=2] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=2, leaderEpoch=3, isr=List(2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=4). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,027] DEBUG [Controller id=2] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=2, leaderEpoch=2, isr=List(2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=3). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,027] DEBUG [Controller id=2] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=2, leaderEpoch=3, isr=List(2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=4). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,027] DEBUG [Controller id=2] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=2, leaderEpoch=3, isr=List(2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=4). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,027] DEBUG [Controller id=2] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=2, leaderEpoch=2, isr=List(2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=3). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,027] DEBUG [Controller id=2] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=2, leaderEpoch=3, isr=List(2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=4). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,027] DEBUG [Controller id=2] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=2, leaderEpoch=3, isr=List(2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=4). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,441] DEBUG [Controller id=2] Updating ISRs for partitions: Set(failureTopic-3). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,446] DEBUG [Controller id=2] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=2, leaderEpoch=3, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=5). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,479] DEBUG [Controller id=2] Updating ISRs for partitions: Set(ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-1, ordersTopic-3, failureTopic-2). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,487] DEBUG [Controller id=2] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=2, leaderEpoch=3, isr=List(2, 0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=5). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,487] DEBUG [Controller id=2] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=2, leaderEpoch=3, isr=List(2, 0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=5). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,487] DEBUG [Controller id=2] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=2, leaderEpoch=2, isr=List(2, 0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=4). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,487] DEBUG [Controller id=2] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=2, leaderEpoch=3, isr=List(2, 0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=5). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,487] DEBUG [Controller id=2] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=2, leaderEpoch=3, isr=List(2, 0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=5). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,487] DEBUG [Controller id=2] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=2, leaderEpoch=2, isr=List(2, 0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=4). (kafka.controller.KafkaController)
[2023-11-28 15:55:14,487] DEBUG [Controller id=2] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=2, leaderEpoch=3, isr=List(2, 0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=5). (kafka.controller.KafkaController)
[2023-11-28 15:55:18,360] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-28 15:55:18,360] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-28 15:55:18,364] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap(ordersTopic-3 -> List(0, 2, 1), failureTopic-1 -> List(0, 2, 1), ordersTopic-0 -> List(0, 1, 2)) (kafka.controller.KafkaController)
[2023-11-28 15:55:18,365] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.15 (kafka.controller.KafkaController)
[2023-11-28 15:55:18,367] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions ordersTopic-3,failureTopic-1,ordersTopic-0 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-11-28 15:55:18,380] INFO [Controller id=2] Partition ordersTopic-3 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-11-28 15:55:18,380] INFO [Controller id=2] Partition failureTopic-1 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-11-28 15:55:18,380] INFO [Controller id=2] Partition ordersTopic-0 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-11-28 15:55:18,380] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap(failureTopic-0 -> List(1, 0, 2), ordersTopic-2 -> List(1, 2, 0), failureTopic-3 -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2023-11-28 15:55:18,380] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.15 (kafka.controller.KafkaController)
[2023-11-28 15:55:18,380] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions failureTopic-0,ordersTopic-2,failureTopic-3 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-11-28 15:55:18,431] INFO [Controller id=2] Partition failureTopic-0 completed preferred replica leader election. New leader is 1 (kafka.controller.KafkaController)
[2023-11-28 15:55:18,431] INFO [Controller id=2] Partition ordersTopic-2 completed preferred replica leader election. New leader is 1 (kafka.controller.KafkaController)
[2023-11-28 15:55:18,431] INFO [Controller id=2] Partition failureTopic-3 completed preferred replica leader election. New leader is 1 (kafka.controller.KafkaController)
[2023-11-28 15:55:18,431] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-28 15:55:18,431] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 00:49:48,402] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2023-11-29 00:49:48,403] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-11-29 00:49:48,403] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 00:49:48,404] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 00:49:48,404] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2023-11-29 00:49:48,356] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2023-11-29 00:49:48,416] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2023-11-29 00:49:48,420] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 00:49:48,420] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 00:49:48,421] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,428] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,428] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,431] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,436] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,436] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,438] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,438] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,438] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,440] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2023-11-29 00:49:48,463] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 4 and epoch zk version is now 4 (kafka.controller.KafkaController)
[2023-11-29 00:49:48,465] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2023-11-29 00:49:48,467] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-11-29 00:49:48,468] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-11-29 00:49:48,469] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2023-11-29 00:49:48,475] INFO [Controller id=0] Initialized broker epochs cache: HashMap(0 -> 472) (kafka.controller.KafkaController)
[2023-11-29 00:49:48,484] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2023-11-29 00:49:48,513] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-11-29 00:49:48,517] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2023-11-29 00:49:48,517] INFO [Controller id=0] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-11-29 00:49:48,517] INFO [Controller id=0] Current list of topics in the cluster: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.KafkaController)
[2023-11-29 00:49:48,517] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-11-29 00:49:48,519] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-11-29 00:49:48,519] INFO [Controller id=0] List of topics ineligible for deletion: ordersTopic,__consumer_offsets,failureTopic (kafka.controller.KafkaController)
[2023-11-29 00:49:48,519] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-11-29 00:49:48,521] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.TopicDeletionManager)
[2023-11-29 00:49:48,521] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2023-11-29 00:49:48,522] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 00:49:48,522] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 00:49:48,526] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 00:49:48,535] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2023-11-29 00:49:48,537] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-11-29 00:49:48,538] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 00:49:48,538] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 00:49:48,538] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2023-11-29 00:49:48,580] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,582] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,744] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=1,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=1,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=0,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=3,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=1] -> OfflineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 00:49:48,744] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 00:49:48,745] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 00:49:48,775] DEBUG [Controller id=1] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-11-29 00:49:48,780] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-11-29 00:49:48,781] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OnlinePartition, __consumer_offsets-46 -> OnlinePartition, __consumer_offsets-9 -> OfflinePartition, __consumer_offsets-42 -> OfflinePartition, __consumer_offsets-21 -> OfflinePartition, ordersTopic-0 -> OnlinePartition, failureTopic-0 -> OnlinePartition, __consumer_offsets-17 -> OfflinePartition, __consumer_offsets-30 -> OfflinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-5 -> OfflinePartition, __consumer_offsets-38 -> OfflinePartition, __consumer_offsets-1 -> OnlinePartition, __consumer_offsets-34 -> OnlinePartition, __consumer_offsets-16 -> OnlinePartition, __consumer_offsets-45 -> OfflinePartition, __consumer_offsets-12 -> OfflinePartition, __consumer_offsets-41 -> OfflinePartition, __consumer_offsets-24 -> OfflinePartition, ordersTopic-1 -> OnlinePartition, __consumer_offsets-20 -> OfflinePartition, __consumer_offsets-49 -> OnlinePartition, failureTopic-1 -> OnlinePartition, __consumer_offsets-0 -> OfflinePartition, __consumer_offsets-29 -> OfflinePartition, __consumer_offsets-25 -> OnlinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-37 -> OnlinePartition, __consumer_offsets-4 -> OnlinePartition, __consumer_offsets-33 -> OfflinePartition, __consumer_offsets-15 -> OfflinePartition, __consumer_offsets-48 -> OfflinePartition, __consumer_offsets-11 -> OfflinePartition, __consumer_offsets-44 -> OfflinePartition, __consumer_offsets-23 -> OfflinePartition, __consumer_offsets-19 -> OnlinePartition, ordersTopic-2 -> OnlinePartition, failureTopic-2 -> OnlinePartition, __consumer_offsets-32 -> OfflinePartition, __consumer_offsets-28 -> OnlinePartition, __consumer_offsets-7 -> OnlinePartition, __consumer_offsets-40 -> OnlinePartition, __consumer_offsets-3 -> OfflinePartition, __consumer_offsets-36 -> OfflinePartition, __consumer_offsets-47 -> OfflinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-43 -> OnlinePartition, __consumer_offsets-10 -> OnlinePartition, failureTopic-3 -> OnlinePartition, __consumer_offsets-22 -> OnlinePartition, ordersTopic-3 -> OnlinePartition, __consumer_offsets-18 -> OfflinePartition, __consumer_offsets-31 -> OnlinePartition, __consumer_offsets-27 -> OfflinePartition, __consumer_offsets-39 -> OfflinePartition, __consumer_offsets-6 -> OfflinePartition, __consumer_offsets-35 -> OfflinePartition, __consumer_offsets-2 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 00:49:48,781] INFO [Controller id=0] Ready to serve as the new controller with epoch 4 (kafka.controller.KafkaController)
[2023-11-29 00:49:48,783] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-11-29 00:49:48,783] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-11-29 00:49:48,783] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-11-29 00:49:48,784] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-11-29 00:49:48,784] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-11-29 00:49:48,786] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-11-29 00:49:48,795] INFO [Controller id=0] Newly added brokers: 1,2, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-11-29 00:49:48,795] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-11-29 00:49:48,799] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-11-29 00:49:48,799] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,802] INFO [Controller id=0] New broker startup callback for 1,2 (kafka.controller.KafkaController)
[2023-11-29 00:49:48,802] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,804] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,804] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-29 00:49:48,933] DEBUG [Controller id=0] Register BrokerModifications handler for List(1, 2) (kafka.controller.KafkaController)
[2023-11-29 00:49:48,936] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 472, 1 -> 526, 2 -> 525) (kafka.controller.KafkaController)
[2023-11-29 00:49:49,476] DEBUG [Controller id=0] Updating ISRs for partitions: Set(ordersTopic-0). (kafka.controller.KafkaController)
[2023-11-29 00:49:49,483] DEBUG [Controller id=0] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=0, leaderEpoch=6, isr=List(0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=9). (kafka.controller.KafkaController)
[2023-11-29 00:49:49,496] DEBUG [Controller id=0] Updating ISRs for partitions: Set(failureTopic-1). (kafka.controller.KafkaController)
[2023-11-29 00:49:49,500] DEBUG [Controller id=0] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=0, leaderEpoch=6, isr=List(0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=9). (kafka.controller.KafkaController)
[2023-11-29 00:49:49,646] DEBUG [Controller id=0] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-11-29 00:49:49,651] DEBUG [Controller id=0] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=0, leaderEpoch=6, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=9). (kafka.controller.KafkaController)
[2023-11-29 00:49:49,656] DEBUG [Controller id=0] Updating ISRs for partitions: Set(ordersTopic-2, failureTopic-1). (kafka.controller.KafkaController)
[2023-11-29 00:49:49,660] DEBUG [Controller id=0] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=0, leaderEpoch=7, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=10). (kafka.controller.KafkaController)
[2023-11-29 00:49:49,660] DEBUG [Controller id=0] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=0, leaderEpoch=6, isr=List(0, 2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=10). (kafka.controller.KafkaController)
[2023-11-29 00:49:49,990] DEBUG [Controller id=0] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-11-29 00:49:49,995] DEBUG [Controller id=0] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=0, leaderEpoch=6, isr=List(0, 1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=10). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,001] DEBUG [Controller id=0] Updating ISRs for partitions: Set(failureTopic-3, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-2). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,005] DEBUG [Controller id=0] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=0, leaderEpoch=7, isr=List(0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=10). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,006] DEBUG [Controller id=0] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=0, leaderEpoch=5, isr=List(0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=8). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,006] DEBUG [Controller id=0] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=0, leaderEpoch=7, isr=List(0, 1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=11). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,006] DEBUG [Controller id=0] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=0, leaderEpoch=5, isr=List(0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=8). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,006] DEBUG [Controller id=0] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=0, leaderEpoch=7, isr=List(0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=10). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,190] DEBUG [Controller id=0] Updating ISRs for partitions: Set(ordersTopic-0). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,196] DEBUG [Controller id=0] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=0, leaderEpoch=6, isr=List(0, 2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=10). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,203] DEBUG [Controller id=0] Updating ISRs for partitions: Set(ordersTopic-1, failureTopic-2). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,210] DEBUG [Controller id=0] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=0, leaderEpoch=5, isr=List(0, 2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=9). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,210] DEBUG [Controller id=0] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=0, leaderEpoch=5, isr=List(0, 2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=9). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,241] DEBUG [Controller id=0] Updating ISRs for partitions: Set(failureTopic-3). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,246] DEBUG [Controller id=0] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=0, leaderEpoch=7, isr=List(0, 2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=11). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,250] DEBUG [Controller id=0] Updating ISRs for partitions: Set(failureTopic-0). (kafka.controller.KafkaController)
[2023-11-29 00:49:50,257] DEBUG [Controller id=0] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=0, leaderEpoch=7, isr=List(0, 2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=11). (kafka.controller.KafkaController)
[2023-11-29 00:49:53,832] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 00:49:53,832] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 00:49:53,834] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 00:49:53,834] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 00:49:53,834] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap(failureTopic-0 -> List(1, 0, 2), ordersTopic-2 -> List(1, 2, 0), failureTopic-3 -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2023-11-29 00:49:53,834] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.15 (kafka.controller.KafkaController)
[2023-11-29 00:49:53,834] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions failureTopic-0,ordersTopic-2,failureTopic-3 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-11-29 00:49:53,850] INFO [Controller id=0] Partition failureTopic-0 completed preferred replica leader election. New leader is 1 (kafka.controller.KafkaController)
[2023-11-29 00:49:53,850] INFO [Controller id=0] Partition ordersTopic-2 completed preferred replica leader election. New leader is 1 (kafka.controller.KafkaController)
[2023-11-29 00:49:53,850] INFO [Controller id=0] Partition failureTopic-3 completed preferred replica leader election. New leader is 1 (kafka.controller.KafkaController)
[2023-11-29 00:49:53,850] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap(failureTopic-2 -> List(2, 1, 0), ordersTopic-1 -> List(2, 0, 1)) (kafka.controller.KafkaController)
[2023-11-29 00:49:53,850] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.1111111111111111 (kafka.controller.KafkaController)
[2023-11-29 00:49:53,850] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions failureTopic-2,ordersTopic-1 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-11-29 00:49:53,929] INFO [Controller id=0] Partition failureTopic-2 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-11-29 00:49:53,929] INFO [Controller id=0] Partition ordersTopic-1 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-11-29 11:00:19,775] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2023-11-29 11:00:19,807] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-11-29 11:00:19,807] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 11:00:19,807] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 11:00:19,807] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2023-11-29 11:00:19,858] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2023-11-29 11:00:20,042] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-11-29 11:00:20,043] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 11:00:20,043] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 11:00:20,043] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2023-11-29 11:00:20,019] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2023-11-29 11:00:20,214] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2023-11-29 11:00:20,214] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 11:00:20,215] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 11:00:20,215] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,217] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,217] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,222] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,223] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,223] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,226] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,226] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,226] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,228] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2023-11-29 11:00:20,344] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 5 and epoch zk version is now 5 (kafka.controller.KafkaController)
[2023-11-29 11:00:20,349] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2023-11-29 11:00:20,351] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-11-29 11:00:20,354] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-11-29 11:00:20,355] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2023-11-29 11:00:20,356] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-11-29 11:00:20,363] INFO [Controller id=2] Initialized broker epochs cache: HashMap(1 -> 592, 2 -> 593) (kafka.controller.KafkaController)
[2023-11-29 11:00:20,376] DEBUG [Controller id=2] Register BrokerModifications handler for Set(1, 2) (kafka.controller.KafkaController)
[2023-11-29 11:00:20,414] DEBUG [Controller id=0] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-11-29 11:00:20,421] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-11-29 11:00:20,425] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-11-29 11:00:20,430] INFO [Controller id=2] Currently active brokers in the cluster: Set(1, 2) (kafka.controller.KafkaController)
[2023-11-29 11:00:20,430] INFO [Controller id=2] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-11-29 11:00:20,430] INFO [Controller id=2] Current list of topics in the cluster: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.KafkaController)
[2023-11-29 11:00:20,430] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-11-29 11:00:20,430] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,430] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,434] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-11-29 11:00:20,434] INFO [Controller id=2] List of topics ineligible for deletion: ordersTopic,__consumer_offsets,failureTopic (kafka.controller.KafkaController)
[2023-11-29 11:00:20,434] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-11-29 11:00:20,434] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.TopicDeletionManager)
[2023-11-29 11:00:20,434] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2023-11-29 11:00:20,438] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 11:00:20,439] INFO [RequestSendThread controllerId=2] Controller 2 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,439] INFO [RequestSendThread controllerId=2] Controller 2 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,463] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 11:00:20,474] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 11:00:20,537] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=2,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=0,Replica=1] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 11:00:20,538] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 11:00:20,540] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 11:00:20,614] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OfflinePartition, __consumer_offsets-46 -> OfflinePartition, __consumer_offsets-9 -> OnlinePartition, __consumer_offsets-42 -> OnlinePartition, __consumer_offsets-21 -> OnlinePartition, ordersTopic-0 -> OnlinePartition, failureTopic-0 -> OnlinePartition, __consumer_offsets-17 -> OnlinePartition, __consumer_offsets-30 -> OnlinePartition, __consumer_offsets-26 -> OnlinePartition, __consumer_offsets-5 -> OnlinePartition, __consumer_offsets-38 -> OnlinePartition, __consumer_offsets-1 -> OfflinePartition, __consumer_offsets-34 -> OfflinePartition, __consumer_offsets-16 -> OfflinePartition, __consumer_offsets-45 -> OnlinePartition, __consumer_offsets-12 -> OnlinePartition, __consumer_offsets-41 -> OnlinePartition, __consumer_offsets-24 -> OnlinePartition, ordersTopic-1 -> OnlinePartition, __consumer_offsets-20 -> OnlinePartition, __consumer_offsets-49 -> OfflinePartition, failureTopic-1 -> OnlinePartition, __consumer_offsets-0 -> OnlinePartition, __consumer_offsets-29 -> OnlinePartition, __consumer_offsets-25 -> OfflinePartition, __consumer_offsets-8 -> OnlinePartition, __consumer_offsets-37 -> OfflinePartition, __consumer_offsets-4 -> OfflinePartition, __consumer_offsets-33 -> OnlinePartition, __consumer_offsets-15 -> OnlinePartition, __consumer_offsets-48 -> OnlinePartition, __consumer_offsets-11 -> OnlinePartition, __consumer_offsets-44 -> OnlinePartition, __consumer_offsets-23 -> OnlinePartition, __consumer_offsets-19 -> OfflinePartition, ordersTopic-2 -> OnlinePartition, failureTopic-2 -> OnlinePartition, __consumer_offsets-32 -> OnlinePartition, __consumer_offsets-28 -> OfflinePartition, __consumer_offsets-7 -> OfflinePartition, __consumer_offsets-40 -> OfflinePartition, __consumer_offsets-3 -> OnlinePartition, __consumer_offsets-36 -> OnlinePartition, __consumer_offsets-47 -> OnlinePartition, __consumer_offsets-14 -> OnlinePartition, __consumer_offsets-43 -> OfflinePartition, __consumer_offsets-10 -> OfflinePartition, failureTopic-3 -> OnlinePartition, __consumer_offsets-22 -> OfflinePartition, ordersTopic-3 -> OnlinePartition, __consumer_offsets-18 -> OnlinePartition, __consumer_offsets-31 -> OfflinePartition, __consumer_offsets-27 -> OnlinePartition, __consumer_offsets-39 -> OnlinePartition, __consumer_offsets-6 -> OnlinePartition, __consumer_offsets-35 -> OnlinePartition, __consumer_offsets-2 -> OnlinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 11:00:20,614] INFO [Controller id=2] Ready to serve as the new controller with epoch 5 (kafka.controller.KafkaController)
[2023-11-29 11:00:20,618] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-11-29 11:00:20,618] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-11-29 11:00:20,618] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-11-29 11:00:20,618] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-11-29 11:00:20,618] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-11-29 11:00:20,624] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-11-29 11:00:20,630] INFO [Controller id=2] Newly added brokers: 0, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-11-29 11:00:20,631] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-11-29 11:00:20,635] INFO [Controller id=2] New broker startup callback for 0 (kafka.controller.KafkaController)
[2023-11-29 11:00:20,729] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,731] INFO [RequestSendThread controllerId=2] Controller 2 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-29 11:00:20,750] DEBUG [Controller id=2] Register BrokerModifications handler for List(0) (kafka.controller.KafkaController)
[2023-11-29 11:00:20,752] INFO [Controller id=2] Updated broker epochs cache: HashMap(0 -> 596, 1 -> 592, 2 -> 593) (kafka.controller.KafkaController)
[2023-11-29 11:00:21,065] DEBUG [Controller id=2] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-11-29 11:00:21,075] DEBUG [Controller id=2] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=2, leaderEpoch=8, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=13). (kafka.controller.KafkaController)
[2023-11-29 11:00:21,104] DEBUG [Controller id=2] Updating ISRs for partitions: Set(ordersTopic-1, failureTopic-1, failureTopic-2). (kafka.controller.KafkaController)
[2023-11-29 11:00:21,118] DEBUG [Controller id=2] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=2, leaderEpoch=7, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=12). (kafka.controller.KafkaController)
[2023-11-29 11:00:21,118] DEBUG [Controller id=2] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=2, leaderEpoch=8, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=13). (kafka.controller.KafkaController)
[2023-11-29 11:00:21,118] DEBUG [Controller id=2] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=2, leaderEpoch=7, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=12). (kafka.controller.KafkaController)
[2023-11-29 11:00:21,127] DEBUG [Controller id=2] Updating ISRs for partitions: Set(failureTopic-0). (kafka.controller.KafkaController)
[2023-11-29 11:00:21,166] DEBUG [Controller id=2] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=9, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=14). (kafka.controller.KafkaController)
[2023-11-29 11:00:21,195] DEBUG [Controller id=2] Updating ISRs for partitions: Set(failureTopic-3, ordersTopic-0, ordersTopic-2). (kafka.controller.KafkaController)
[2023-11-29 11:00:21,203] DEBUG [Controller id=2] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=9, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=14). (kafka.controller.KafkaController)
[2023-11-29 11:00:21,204] DEBUG [Controller id=2] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=8, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=13). (kafka.controller.KafkaController)
[2023-11-29 11:00:21,204] DEBUG [Controller id=2] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=9, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=14). (kafka.controller.KafkaController)
[2023-11-29 11:00:25,627] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 11:00:25,627] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 11:00:25,629] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap(ordersTopic-3 -> List(0, 2, 1), failureTopic-1 -> List(0, 2, 1), ordersTopic-0 -> List(0, 1, 2)) (kafka.controller.KafkaController)
[2023-11-29 11:00:25,629] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.15 (kafka.controller.KafkaController)
[2023-11-29 11:00:25,629] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions ordersTopic-3,failureTopic-1,ordersTopic-0 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-11-29 11:00:25,642] INFO [Controller id=2] Partition ordersTopic-3 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-11-29 11:00:25,642] INFO [Controller id=2] Partition failureTopic-1 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-11-29 11:00:25,642] INFO [Controller id=2] Partition ordersTopic-0 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-11-29 11:00:25,642] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:00:25,642] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:00:25,644] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:00:25,644] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:05:25,656] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 11:05:25,656] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 11:05:25,658] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:05:25,658] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:05:25,658] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:05:25,658] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:05:25,658] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:05:25,658] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:10:26,084] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 11:10:26,084] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 11:10:26,086] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:10:26,086] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:10:26,086] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:10:26,086] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:10:26,086] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:10:26,086] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:15:26,107] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 11:15:26,107] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 11:15:26,109] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:15:26,109] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:15:26,109] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:15:26,109] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:15:26,109] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:15:26,109] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:20:26,100] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 11:20:26,100] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 11:20:26,102] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:20:26,102] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:20:26,102] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:20:26,102] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:20:26,102] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:20:26,102] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:25:26,088] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 11:25:26,088] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 11:25:26,089] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:25:26,089] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:25:26,089] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:25:26,089] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:25:26,089] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:25:26,089] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:30:26,089] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 11:30:26,089] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 11:30:26,090] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:30:26,090] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:30:26,090] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:30:26,090] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:30:26,090] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:30:26,090] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:35:26,094] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 11:35:26,094] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 11:35:26,094] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:35:26,094] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:35:26,095] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:35:26,095] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:35:26,095] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:35:26,095] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:40:26,125] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 11:40:26,125] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 11:40:26,126] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:40:26,126] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:40:26,126] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:40:26,126] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:40:26,126] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:40:26,127] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:45:26,140] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 11:45:26,140] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 11:45:26,141] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:45:26,141] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:45:26,141] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:45:26,141] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:45:26,141] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:45:26,141] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:50:26,142] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 11:50:26,142] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 11:50:26,143] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:50:26,143] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:50:26,144] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:50:26,144] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:50:26,144] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:50:26,144] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:55:26,158] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 11:55:26,158] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 11:55:26,159] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:55:26,159] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:55:26,159] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:55:26,160] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 11:55:26,160] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 11:55:26,160] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:00:26,167] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 12:00:26,172] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 12:00:26,173] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:00:26,173] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:00:26,173] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:00:26,173] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:00:26,173] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:00:26,173] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:05:26,180] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 12:05:26,180] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 12:05:26,181] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:05:26,181] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:05:26,181] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:05:26,181] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:05:26,181] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:05:26,181] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:10:26,187] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 12:10:26,187] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 12:10:26,188] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:10:26,188] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:10:26,188] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:10:26,188] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:10:26,188] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:10:26,188] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:15:26,189] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 12:15:26,189] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 12:15:26,190] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:15:26,191] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:15:26,191] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:15:26,191] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:15:26,191] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:15:26,191] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:20:26,201] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 12:20:26,201] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 12:20:26,202] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:20:26,202] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:20:26,202] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:20:26,202] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:20:26,202] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:20:26,202] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:25:26,213] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 12:25:26,213] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 12:25:26,213] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:25:26,213] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:25:26,213] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:25:26,213] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:25:26,213] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:25:26,213] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:30:26,223] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 12:30:26,224] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 12:30:26,225] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:30:26,225] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:30:26,225] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:30:26,225] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:30:26,225] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:30:26,225] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:35:26,230] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 12:35:26,230] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 12:35:26,231] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:35:26,231] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:35:26,231] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:35:26,231] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:35:26,231] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:35:26,231] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:40:26,233] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 12:40:26,233] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 12:40:26,235] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:40:26,235] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:40:26,235] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:40:26,235] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:40:26,235] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:40:26,235] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:45:26,246] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 12:45:26,246] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 12:45:26,246] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:45:26,246] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:45:26,246] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:45:26,246] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:45:26,246] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:45:26,246] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:50:26,263] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 12:50:26,263] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 12:50:26,266] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:50:26,266] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:50:26,266] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:50:26,266] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:50:26,266] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:50:26,266] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:55:26,269] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 12:55:26,270] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 12:55:26,271] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:55:26,271] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:55:26,271] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:55:26,271] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 12:55:26,271] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 12:55:26,271] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 13:00:26,276] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 13:00:26,282] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 13:00:26,283] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 13:00:26,283] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 13:00:26,283] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 13:00:26,283] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 13:00:26,283] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 13:00:26,283] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 13:05:27,394] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 13:05:27,394] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 13:05:27,395] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 13:05:27,395] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 13:05:27,395] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 13:05:27,395] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 13:05:27,395] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 13:05:27,395] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:13:19,827] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2023-11-29 14:13:19,828] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-11-29 14:13:19,829] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 14:13:19,829] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 14:13:19,829] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2023-11-29 14:13:19,922] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2023-11-29 14:13:19,924] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-11-29 14:13:19,925] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 14:13:19,925] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 14:13:19,927] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2023-11-29 14:13:20,044] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 6 and epoch zk version is now 6 (kafka.controller.KafkaController)
[2023-11-29 14:13:20,046] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2023-11-29 14:13:20,048] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-11-29 14:13:20,049] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-11-29 14:13:20,052] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2023-11-29 14:13:20,062] INFO [Controller id=0] Initialized broker epochs cache: HashMap(0 -> 658, 1 -> 661) (kafka.controller.KafkaController)
[2023-11-29 14:13:20,072] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0, 1) (kafka.controller.KafkaController)
[2023-11-29 14:13:20,097] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-11-29 14:13:20,190] DEBUG [Controller id=1] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-11-29 14:13:20,199] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-11-29 14:13:20,208] INFO [Controller id=0] Currently active brokers in the cluster: Set(0, 1) (kafka.controller.KafkaController)
[2023-11-29 14:13:20,208] INFO [Controller id=0] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-11-29 14:13:20,208] INFO [Controller id=0] Current list of topics in the cluster: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.KafkaController)
[2023-11-29 14:13:20,208] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,208] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-11-29 14:13:20,212] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-11-29 14:13:20,212] INFO [Controller id=0] List of topics ineligible for deletion: ordersTopic,__consumer_offsets,failureTopic (kafka.controller.KafkaController)
[2023-11-29 14:13:20,212] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-11-29 14:13:20,212] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.TopicDeletionManager)
[2023-11-29 14:13:20,212] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2023-11-29 14:13:20,214] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 14:13:20,215] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 14:13:20,216] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,223] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 14:13:20,274] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2023-11-29 14:13:20,276] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2023-11-29 14:13:20,279] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 14:13:20,279] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 14:13:20,280] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,281] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,281] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,290] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,291] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,292] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,294] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,295] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,295] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,297] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2023-11-29 14:13:20,335] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=1,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=0,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=1] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-11-29 14:13:20,337] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 14:13:20,339] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 14:13:20,364] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OnlinePartition, __consumer_offsets-46 -> OnlinePartition, __consumer_offsets-9 -> OnlinePartition, __consumer_offsets-42 -> OnlinePartition, __consumer_offsets-21 -> OnlinePartition, ordersTopic-0 -> OnlinePartition, failureTopic-0 -> OnlinePartition, __consumer_offsets-17 -> OfflinePartition, __consumer_offsets-30 -> OnlinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-5 -> OfflinePartition, __consumer_offsets-38 -> OfflinePartition, __consumer_offsets-1 -> OnlinePartition, __consumer_offsets-34 -> OnlinePartition, __consumer_offsets-16 -> OnlinePartition, __consumer_offsets-45 -> OnlinePartition, __consumer_offsets-12 -> OnlinePartition, __consumer_offsets-41 -> OfflinePartition, __consumer_offsets-24 -> OnlinePartition, ordersTopic-1 -> OnlinePartition, __consumer_offsets-20 -> OfflinePartition, __consumer_offsets-49 -> OnlinePartition, failureTopic-1 -> OnlinePartition, __consumer_offsets-0 -> OnlinePartition, __consumer_offsets-29 -> OfflinePartition, __consumer_offsets-25 -> OnlinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-37 -> OnlinePartition, __consumer_offsets-4 -> OnlinePartition, __consumer_offsets-33 -> OnlinePartition, __consumer_offsets-15 -> OnlinePartition, __consumer_offsets-48 -> OnlinePartition, __consumer_offsets-11 -> OfflinePartition, __consumer_offsets-44 -> OfflinePartition, __consumer_offsets-23 -> OfflinePartition, __consumer_offsets-19 -> OnlinePartition, ordersTopic-2 -> OnlinePartition, failureTopic-2 -> OnlinePartition, __consumer_offsets-32 -> OfflinePartition, __consumer_offsets-28 -> OnlinePartition, __consumer_offsets-7 -> OnlinePartition, __consumer_offsets-40 -> OnlinePartition, __consumer_offsets-3 -> OnlinePartition, __consumer_offsets-36 -> OnlinePartition, __consumer_offsets-47 -> OfflinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-43 -> OnlinePartition, __consumer_offsets-10 -> OnlinePartition, failureTopic-3 -> OnlinePartition, __consumer_offsets-22 -> OnlinePartition, ordersTopic-3 -> OnlinePartition, __consumer_offsets-18 -> OnlinePartition, __consumer_offsets-31 -> OnlinePartition, __consumer_offsets-27 -> OnlinePartition, __consumer_offsets-39 -> OnlinePartition, __consumer_offsets-6 -> OnlinePartition, __consumer_offsets-35 -> OfflinePartition, __consumer_offsets-2 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-11-29 14:13:20,365] INFO [Controller id=0] Ready to serve as the new controller with epoch 6 (kafka.controller.KafkaController)
[2023-11-29 14:13:20,372] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-11-29 14:13:20,372] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-11-29 14:13:20,372] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-11-29 14:13:20,372] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-11-29 14:13:20,372] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-11-29 14:13:20,374] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-11-29 14:13:20,407] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,409] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,689] INFO [Controller id=0] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-11-29 14:13:20,689] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-11-29 14:13:20,694] INFO [Controller id=0] New broker startup callback for 2 (kafka.controller.KafkaController)
[2023-11-29 14:13:20,743] DEBUG [Controller id=0] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2023-11-29 14:13:20,744] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 658, 1 -> 661, 2 -> 690) (kafka.controller.KafkaController)
[2023-11-29 14:13:20,755] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-11-29 14:13:20,895] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-11-29 14:13:20,897] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-11-29 14:13:21,164] DEBUG [Controller id=0] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-11-29 14:13:21,170] DEBUG [Controller id=0] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=0, leaderEpoch=10, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=16). (kafka.controller.KafkaController)
[2023-11-29 14:13:21,296] DEBUG [Controller id=0] Updating ISRs for partitions: Set(ordersTopic-0, ordersTopic-1, failureTopic-1). (kafka.controller.KafkaController)
[2023-11-29 14:13:21,300] DEBUG [Controller id=0] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=0, leaderEpoch=10, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=16). (kafka.controller.KafkaController)
[2023-11-29 14:13:21,300] DEBUG [Controller id=0] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=0, leaderEpoch=9, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=15). (kafka.controller.KafkaController)
[2023-11-29 14:13:21,300] DEBUG [Controller id=0] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=0, leaderEpoch=10, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=16). (kafka.controller.KafkaController)
[2023-11-29 14:13:21,304] DEBUG [Controller id=0] Updating ISRs for partitions: Set(failureTopic-0). (kafka.controller.KafkaController)
[2023-11-29 14:13:21,308] DEBUG [Controller id=0] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=10, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=16). (kafka.controller.KafkaController)
[2023-11-29 14:13:21,319] DEBUG [Controller id=0] Updating ISRs for partitions: Set(failureTopic-3, ordersTopic-2, failureTopic-2). (kafka.controller.KafkaController)
[2023-11-29 14:13:21,324] DEBUG [Controller id=0] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=10, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=16). (kafka.controller.KafkaController)
[2023-11-29 14:13:21,324] DEBUG [Controller id=0] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=10, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=16). (kafka.controller.KafkaController)
[2023-11-29 14:13:21,324] DEBUG [Controller id=0] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=9, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=15). (kafka.controller.KafkaController)
[2023-11-29 14:13:25,391] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 14:13:25,391] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 14:13:25,392] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:13:25,392] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:13:25,393] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:13:25,393] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:13:25,393] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap(failureTopic-2 -> List(2, 1, 0), ordersTopic-1 -> List(2, 0, 1)) (kafka.controller.KafkaController)
[2023-11-29 14:13:25,393] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.1111111111111111 (kafka.controller.KafkaController)
[2023-11-29 14:13:25,393] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions failureTopic-2,ordersTopic-1 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-11-29 14:13:25,399] INFO [Controller id=0] Partition failureTopic-2 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-11-29 14:13:25,399] INFO [Controller id=0] Partition ordersTopic-1 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-11-29 14:18:25,403] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 14:18:25,403] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 14:18:25,404] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:18:25,404] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:18:25,404] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:18:25,404] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:18:25,404] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:18:25,404] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:23:25,456] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 14:23:25,456] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 14:23:25,457] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:23:25,457] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:23:25,457] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:23:25,457] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:23:25,457] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:23:25,457] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:28:25,471] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 14:28:25,471] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 14:28:25,473] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:28:25,473] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:28:25,473] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:28:25,473] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:28:25,473] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:28:25,473] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:33:25,432] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 14:33:25,432] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 14:33:25,434] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:33:25,434] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:33:25,434] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:33:25,434] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:33:25,434] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:33:25,434] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:38:25,402] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 14:38:25,402] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 14:38:25,402] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:38:25,402] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:38:25,402] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:38:25,403] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:38:25,403] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:38:25,403] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:43:25,414] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 14:43:25,414] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 14:43:25,416] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:43:25,416] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:43:25,416] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:43:25,416] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:43:25,416] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:43:25,416] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:48:25,421] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 14:48:25,421] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 14:48:25,422] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:48:25,422] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:48:25,422] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:48:25,422] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:48:25,422] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:48:25,422] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:53:25,426] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 14:53:25,426] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 14:53:25,427] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:53:25,427] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:53:25,427] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:53:25,427] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:53:25,427] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:53:25,427] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:58:25,427] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 14:58:25,427] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 14:58:25,428] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:58:25,428] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:58:25,428] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:58:25,428] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 14:58:25,428] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 14:58:25,428] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:03:25,430] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 15:03:25,434] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 15:03:25,435] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:03:25,435] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:03:25,435] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:03:25,435] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:03:25,435] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:03:25,435] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:08:25,481] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 15:08:25,482] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 15:08:25,483] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:08:25,483] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:08:25,483] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:08:25,483] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:08:25,483] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:08:25,483] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:13:25,509] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 15:13:25,509] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 15:13:25,510] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:13:25,510] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:13:25,510] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:13:25,510] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:13:25,510] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:13:25,510] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:18:25,518] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 15:18:25,518] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 15:18:25,519] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:18:25,520] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:18:25,520] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:18:25,520] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:18:25,520] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:18:25,520] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:23:25,531] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 15:23:25,531] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 15:23:25,532] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:23:25,532] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:23:25,532] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:23:25,532] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:23:25,532] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:23:25,532] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:28:25,542] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 15:28:25,542] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 15:28:25,543] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:28:25,543] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:28:25,543] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:28:25,543] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:28:25,543] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:28:25,543] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:33:25,552] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 15:33:25,552] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 15:33:25,553] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:33:25,553] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:33:25,553] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:33:25,553] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:33:25,553] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:33:25,553] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:38:25,560] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 15:38:25,560] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 15:38:25,561] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:38:25,561] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:38:25,561] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:38:25,561] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:38:25,561] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:38:25,561] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:43:25,573] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 15:43:25,573] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 15:43:25,575] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:43:25,575] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:43:25,575] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:43:25,575] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:43:25,576] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:43:25,576] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:48:25,589] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 15:48:25,589] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 15:48:25,590] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:48:25,590] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:48:25,590] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:48:25,590] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:48:25,590] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:48:25,590] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:53:25,603] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 15:53:25,603] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 15:53:25,604] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:53:25,604] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:53:25,604] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:53:25,604] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:53:25,604] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:53:25,604] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:58:25,606] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-11-29 15:58:25,606] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-11-29 15:58:25,606] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:58:25,606] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:58:25,606] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:58:25,606] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-11-29 15:58:25,606] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-11-29 15:58:25,607] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 12:46:25,116] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-12-01 12:46:25,161] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 7 and epoch zk version is now 7 (kafka.controller.KafkaController)
[2023-12-01 12:46:25,164] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2023-12-01 12:46:25,170] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-12-01 12:46:25,174] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-12-01 12:46:25,180] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2023-12-01 12:46:25,201] INFO [Controller id=0] Initialized broker epochs cache: HashMap(0 -> 735) (kafka.controller.KafkaController)
[2023-12-01 12:46:25,219] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2023-12-01 12:46:25,273] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-12-01 12:46:25,280] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-12-01 12:46:25,282] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2023-12-01 12:46:25,283] INFO [Controller id=0] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-12-01 12:46:25,283] INFO [Controller id=0] Current list of topics in the cluster: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.KafkaController)
[2023-12-01 12:46:25,283] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-12-01 12:46:25,290] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-12-01 12:46:25,290] INFO [Controller id=0] List of topics ineligible for deletion: ordersTopic,__consumer_offsets,failureTopic (kafka.controller.KafkaController)
[2023-12-01 12:46:25,290] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-12-01 12:46:25,291] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.TopicDeletionManager)
[2023-12-01 12:46:25,293] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2023-12-01 12:46:25,305] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-12-01 12:46:25,317] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-01 12:46:25,318] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-01 12:46:25,350] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-01 12:46:25,506] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=1,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=1,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=0,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=3,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=1] -> OfflineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-12-01 12:46:25,506] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-12-01 12:46:25,511] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-12-01 12:46:25,604] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OnlinePartition, __consumer_offsets-46 -> OnlinePartition, __consumer_offsets-9 -> OfflinePartition, __consumer_offsets-42 -> OfflinePartition, __consumer_offsets-21 -> OfflinePartition, ordersTopic-0 -> OnlinePartition, failureTopic-0 -> OnlinePartition, __consumer_offsets-17 -> OfflinePartition, __consumer_offsets-30 -> OfflinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-5 -> OfflinePartition, __consumer_offsets-38 -> OfflinePartition, __consumer_offsets-1 -> OnlinePartition, __consumer_offsets-34 -> OnlinePartition, __consumer_offsets-16 -> OnlinePartition, __consumer_offsets-45 -> OfflinePartition, __consumer_offsets-12 -> OfflinePartition, __consumer_offsets-41 -> OfflinePartition, __consumer_offsets-24 -> OfflinePartition, ordersTopic-1 -> OnlinePartition, __consumer_offsets-20 -> OfflinePartition, __consumer_offsets-49 -> OnlinePartition, failureTopic-1 -> OnlinePartition, __consumer_offsets-0 -> OfflinePartition, __consumer_offsets-29 -> OfflinePartition, __consumer_offsets-25 -> OnlinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-37 -> OnlinePartition, __consumer_offsets-4 -> OnlinePartition, __consumer_offsets-33 -> OfflinePartition, __consumer_offsets-15 -> OfflinePartition, __consumer_offsets-48 -> OfflinePartition, __consumer_offsets-11 -> OfflinePartition, __consumer_offsets-44 -> OfflinePartition, __consumer_offsets-23 -> OfflinePartition, __consumer_offsets-19 -> OnlinePartition, ordersTopic-2 -> OnlinePartition, failureTopic-2 -> OnlinePartition, __consumer_offsets-32 -> OfflinePartition, __consumer_offsets-28 -> OnlinePartition, __consumer_offsets-7 -> OnlinePartition, __consumer_offsets-40 -> OnlinePartition, __consumer_offsets-3 -> OfflinePartition, __consumer_offsets-36 -> OfflinePartition, __consumer_offsets-47 -> OfflinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-43 -> OnlinePartition, __consumer_offsets-10 -> OnlinePartition, failureTopic-3 -> OnlinePartition, __consumer_offsets-22 -> OnlinePartition, ordersTopic-3 -> OnlinePartition, __consumer_offsets-18 -> OfflinePartition, __consumer_offsets-31 -> OnlinePartition, __consumer_offsets-27 -> OfflinePartition, __consumer_offsets-39 -> OfflinePartition, __consumer_offsets-6 -> OfflinePartition, __consumer_offsets-35 -> OfflinePartition, __consumer_offsets-2 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-12-01 12:46:25,605] INFO [Controller id=0] Ready to serve as the new controller with epoch 7 (kafka.controller.KafkaController)
[2023-12-01 12:46:25,617] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-12-01 12:46:25,618] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-12-01 12:46:25,618] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-12-01 12:46:25,619] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-12-01 12:46:25,620] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-12-01 12:46:25,633] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-12-01 12:46:30,643] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 12:46:30,643] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 12:46:30,649] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 12:46:30,651] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 12:46:30,651] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap(__consumer_offsets-30 -> List(1), __consumer_offsets-33 -> List(1), __consumer_offsets-36 -> List(1), __consumer_offsets-48 -> List(1), __consumer_offsets-0 -> List(1), __consumer_offsets-45 -> List(1), failureTopic-3 -> List(1, 2, 0), failureTopic-0 -> List(1, 0, 2), __consumer_offsets-21 -> List(1), __consumer_offsets-27 -> List(1), __consumer_offsets-9 -> List(1), __consumer_offsets-42 -> List(1), __consumer_offsets-3 -> List(1), __consumer_offsets-18 -> List(1), __consumer_offsets-15 -> List(1), __consumer_offsets-24 -> List(1), __consumer_offsets-6 -> List(1), ordersTopic-2 -> List(1, 2, 0), __consumer_offsets-39 -> List(1), __consumer_offsets-12 -> List(1)) (kafka.controller.KafkaController)
[2023-12-01 12:46:30,651] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 1.0 (kafka.controller.KafkaController)
[2023-12-01 12:46:30,653] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-01 12:46:30,653] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap(__consumer_offsets-8 -> List(2), failureTopic-2 -> List(2, 1, 0), __consumer_offsets-35 -> List(2), __consumer_offsets-47 -> List(2), __consumer_offsets-38 -> List(2), __consumer_offsets-17 -> List(2), __consumer_offsets-11 -> List(2), ordersTopic-1 -> List(2, 0, 1), __consumer_offsets-29 -> List(2), __consumer_offsets-32 -> List(2), __consumer_offsets-41 -> List(2), __consumer_offsets-23 -> List(2), __consumer_offsets-2 -> List(2), __consumer_offsets-14 -> List(2), __consumer_offsets-20 -> List(2), __consumer_offsets-44 -> List(2), __consumer_offsets-5 -> List(2), __consumer_offsets-26 -> List(2)) (kafka.controller.KafkaController)
[2023-12-01 12:46:30,653] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 1.0 (kafka.controller.KafkaController)
[2023-12-01 12:46:30,653] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-01 12:46:43,465] INFO [Controller id=0] Newly added brokers: 1, deleted brokers: , bounced brokers: , all live brokers: 0,1 (kafka.controller.KafkaController)
[2023-12-01 12:46:43,465] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-12-01 12:46:43,469] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-12-01 12:46:43,470] INFO [Controller id=0] New broker startup callback for 1 (kafka.controller.KafkaController)
[2023-12-01 12:46:43,475] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-01 12:46:43,518] DEBUG [Controller id=0] Register BrokerModifications handler for List(1) (kafka.controller.KafkaController)
[2023-12-01 12:46:43,520] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 735, 1 -> 807) (kafka.controller.KafkaController)
[2023-12-01 12:46:43,550] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-12-01 12:46:43,574] DEBUG [Controller id=1] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-01 12:46:44,028] DEBUG [Controller id=0] Updating ISRs for partitions: Set(failureTopic-3). (kafka.controller.KafkaController)
[2023-12-01 12:46:44,033] DEBUG [Controller id=0] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=0, leaderEpoch=13, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=20). (kafka.controller.KafkaController)
[2023-12-01 12:46:44,048] DEBUG [Controller id=0] Updating ISRs for partitions: Set(ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-1, ordersTopic-3, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-01 12:46:44,057] DEBUG [Controller id=0] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=0, leaderEpoch=12, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=19). (kafka.controller.KafkaController)
[2023-12-01 12:46:44,057] DEBUG [Controller id=0] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=0, leaderEpoch=13, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=20). (kafka.controller.KafkaController)
[2023-12-01 12:46:44,057] DEBUG [Controller id=0] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=0, leaderEpoch=13, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=20). (kafka.controller.KafkaController)
[2023-12-01 12:46:44,057] DEBUG [Controller id=0] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=0, leaderEpoch=12, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=19). (kafka.controller.KafkaController)
[2023-12-01 12:46:44,057] DEBUG [Controller id=0] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=0, leaderEpoch=13, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=20). (kafka.controller.KafkaController)
[2023-12-01 12:46:44,057] DEBUG [Controller id=0] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=0, leaderEpoch=13, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=20). (kafka.controller.KafkaController)
[2023-12-01 12:46:44,057] DEBUG [Controller id=0] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=0, leaderEpoch=12, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=19). (kafka.controller.KafkaController)
[2023-12-01 12:46:59,262] INFO [Controller id=0] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-12-01 12:46:59,263] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-12-01 12:46:59,266] INFO [Controller id=0] New broker startup callback for 2 (kafka.controller.KafkaController)
[2023-12-01 12:46:59,266] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-12-01 12:46:59,272] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-01 12:46:59,295] DEBUG [Controller id=0] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2023-12-01 12:46:59,296] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 735, 1 -> 807, 2 -> 848) (kafka.controller.KafkaController)
[2023-12-01 12:46:59,333] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-12-01 12:46:59,359] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-01 12:46:59,691] DEBUG [Controller id=0] Updating ISRs for partitions: Set(failureTopic-3). (kafka.controller.KafkaController)
[2023-12-01 12:46:59,697] DEBUG [Controller id=0] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=0, leaderEpoch=13, isr=List(0, 1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=21). (kafka.controller.KafkaController)
[2023-12-01 12:46:59,700] DEBUG [Controller id=0] Updating ISRs for partitions: Set(ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-1, ordersTopic-3, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-01 12:46:59,704] DEBUG [Controller id=0] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=0, leaderEpoch=12, isr=List(0, 1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=20). (kafka.controller.KafkaController)
[2023-12-01 12:46:59,704] DEBUG [Controller id=0] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=0, leaderEpoch=13, isr=List(0, 1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=21). (kafka.controller.KafkaController)
[2023-12-01 12:46:59,704] DEBUG [Controller id=0] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=0, leaderEpoch=13, isr=List(0, 1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=21). (kafka.controller.KafkaController)
[2023-12-01 12:46:59,704] DEBUG [Controller id=0] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=0, leaderEpoch=12, isr=List(0, 1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=20). (kafka.controller.KafkaController)
[2023-12-01 12:46:59,704] DEBUG [Controller id=0] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=0, leaderEpoch=13, isr=List(0, 1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=21). (kafka.controller.KafkaController)
[2023-12-01 12:46:59,704] DEBUG [Controller id=0] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=0, leaderEpoch=13, isr=List(0, 1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=21). (kafka.controller.KafkaController)
[2023-12-01 12:46:59,704] DEBUG [Controller id=0] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=0, leaderEpoch=12, isr=List(0, 1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=20). (kafka.controller.KafkaController)
[2023-12-01 12:51:30,659] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 12:51:30,659] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 12:51:30,661] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 12:51:30,661] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 12:51:30,661] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap(failureTopic-0 -> List(1, 0, 2), ordersTopic-2 -> List(1, 2, 0), failureTopic-3 -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2023-12-01 12:51:30,661] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.15 (kafka.controller.KafkaController)
[2023-12-01 12:51:30,661] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions failureTopic-0,ordersTopic-2,failureTopic-3 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-01 12:51:30,674] INFO [Controller id=0] Partition failureTopic-0 completed preferred replica leader election. New leader is 1 (kafka.controller.KafkaController)
[2023-12-01 12:51:30,674] INFO [Controller id=0] Partition ordersTopic-2 completed preferred replica leader election. New leader is 1 (kafka.controller.KafkaController)
[2023-12-01 12:51:30,674] INFO [Controller id=0] Partition failureTopic-3 completed preferred replica leader election. New leader is 1 (kafka.controller.KafkaController)
[2023-12-01 12:51:30,674] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap(failureTopic-2 -> List(2, 1, 0), ordersTopic-1 -> List(2, 0, 1)) (kafka.controller.KafkaController)
[2023-12-01 12:51:30,674] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.1111111111111111 (kafka.controller.KafkaController)
[2023-12-01 12:51:30,674] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions failureTopic-2,ordersTopic-1 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-01 12:51:30,681] INFO [Controller id=0] Partition failureTopic-2 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-12-01 12:51:30,681] INFO [Controller id=0] Partition ordersTopic-1 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-12-01 12:51:36,258] DEBUG [Controller id=0] Read current producerId block ProducerIdsBlock(assignedBrokerId=1, firstProducerId=2000, size=1000), Zk path version 3 (kafka.controller.KafkaController)
[2023-12-01 12:51:36,264] INFO [Controller id=0] Acquired new producerId block ProducerIdsBlock(assignedBrokerId=0, firstProducerId=3000, size=1000) by writing to Zk with path version 4 (kafka.controller.KafkaController)
[2023-12-01 12:56:30,685] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 12:56:30,685] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 12:56:30,686] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 12:56:30,686] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 12:56:30,686] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 12:56:30,686] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 12:56:30,686] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 12:56:30,686] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:01:30,695] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 13:01:30,696] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 13:01:30,697] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:01:30,697] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:01:30,697] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:01:30,697] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:01:30,697] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:01:30,697] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:04:28,806] DEBUG [Controller id=0] Read current producerId block ProducerIdsBlock(assignedBrokerId=0, firstProducerId=3000, size=1000), Zk path version 4 (kafka.controller.KafkaController)
[2023-12-01 13:04:28,811] INFO [Controller id=0] Acquired new producerId block ProducerIdsBlock(assignedBrokerId=2, firstProducerId=4000, size=1000) by writing to Zk with path version 5 (kafka.controller.KafkaController)
[2023-12-01 13:06:30,705] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 13:06:30,705] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 13:06:30,706] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:06:30,706] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:06:30,706] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:06:30,706] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:06:30,706] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:06:30,706] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:11:30,707] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 13:11:30,707] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 13:11:30,709] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:11:30,709] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:11:30,709] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:11:30,709] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:11:30,709] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:11:30,709] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:16:30,716] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 13:16:30,716] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 13:16:30,718] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:16:30,718] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:16:30,718] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:16:30,718] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:16:30,718] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:16:30,718] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:21:30,725] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 13:21:30,725] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 13:21:30,726] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:21:30,726] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:21:30,726] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:21:30,727] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:21:30,727] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:21:30,727] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:26:30,739] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 13:26:30,739] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 13:26:30,740] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:26:30,740] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:26:30,740] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:26:30,740] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:26:30,740] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:26:30,740] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:31:30,744] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 13:31:30,744] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 13:31:30,744] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:31:30,744] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:31:30,745] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:31:30,745] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:31:30,745] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:31:30,745] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:36:30,748] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 13:36:30,748] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 13:36:30,750] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:36:30,750] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:36:30,750] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:36:30,750] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:36:30,750] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:36:30,750] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:41:30,763] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 13:41:30,763] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 13:41:30,763] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:41:30,763] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:41:30,763] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:41:30,763] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:41:30,763] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:41:30,763] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:46:30,778] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 13:46:30,780] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 13:46:30,781] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:46:30,781] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:46:30,781] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:46:30,781] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:46:30,781] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:46:30,781] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:51:30,795] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 13:51:30,795] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 13:51:30,795] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:51:30,795] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:51:30,795] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:51:30,795] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:51:30,795] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:51:30,795] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:56:30,802] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 13:56:30,802] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 13:56:30,804] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:56:30,804] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:56:30,804] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:56:30,804] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 13:56:30,804] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 13:56:30,804] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:01:30,814] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 14:01:30,817] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 14:01:30,818] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:01:30,818] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:01:30,818] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:01:30,818] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:01:30,818] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:01:30,818] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:06:30,825] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 14:06:30,825] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 14:06:30,825] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:06:30,825] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:06:30,825] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:06:30,825] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:06:30,825] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:06:30,825] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:11:30,834] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 14:11:30,834] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 14:11:30,835] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:11:30,835] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:11:30,835] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:11:30,835] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:11:30,835] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:11:30,835] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:16:30,855] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 14:16:30,855] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 14:16:30,856] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:16:30,856] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:16:30,856] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:16:30,856] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:16:30,856] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:16:30,856] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:21:30,858] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 14:21:30,858] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 14:21:30,859] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:21:30,859] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:21:30,859] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:21:30,859] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:21:30,859] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:21:30,859] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:26:30,862] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 14:26:30,862] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 14:26:30,862] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:26:30,863] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:26:30,863] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:26:30,863] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:26:30,863] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:26:30,863] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:31:30,878] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 14:31:30,878] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 14:31:30,878] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:31:30,878] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:31:30,878] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:31:30,878] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:31:30,878] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:31:30,878] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:36:30,882] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 14:36:30,882] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 14:36:30,882] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:36:30,882] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:36:30,883] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:36:30,883] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:36:30,883] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:36:30,883] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:41:30,897] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 14:41:30,897] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 14:41:30,898] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:41:30,898] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:41:30,898] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:41:30,899] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:41:30,899] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:41:30,899] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:46:30,900] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 14:46:30,900] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 14:46:30,900] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:46:30,900] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:46:30,901] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:46:30,901] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:46:30,901] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:46:30,901] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:51:30,902] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 14:51:30,902] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 14:51:30,902] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:51:30,902] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:51:30,903] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:51:30,903] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:51:30,903] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:51:30,903] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:56:30,906] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 14:56:30,906] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 14:56:30,906] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:56:30,906] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:56:30,906] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:56:30,906] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 14:56:30,906] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 14:56:30,906] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:01:30,909] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 15:01:30,910] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 15:01:30,910] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:01:30,910] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:01:30,910] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:01:30,910] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:01:30,910] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:01:30,910] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:06:30,920] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 15:06:30,921] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 15:06:30,922] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:06:30,922] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:06:30,922] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:06:30,922] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:06:30,922] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:06:30,922] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:11:30,927] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 15:11:30,927] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 15:11:30,927] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:11:30,927] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:11:30,928] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:11:30,928] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:11:30,928] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:11:30,928] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:16:30,933] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 15:16:30,933] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 15:16:30,935] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:16:30,935] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:16:30,935] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:16:30,935] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:16:30,935] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:16:30,935] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:21:30,940] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 15:21:30,940] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 15:21:30,941] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:21:30,941] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:21:30,941] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:21:30,941] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:21:30,941] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:21:30,941] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:26:30,953] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 15:26:30,953] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 15:26:30,955] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:26:30,955] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:26:30,955] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:26:30,955] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:26:30,955] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:26:30,955] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:31:30,960] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 15:31:30,960] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 15:31:30,961] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:31:30,962] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:31:30,962] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:31:30,962] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:31:30,962] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:31:30,962] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:36:30,970] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 15:36:30,970] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 15:36:30,971] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:36:30,971] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:36:30,971] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:36:30,971] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:36:30,971] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:36:30,971] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:41:30,977] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 15:41:30,977] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 15:41:30,978] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:41:30,978] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:41:30,978] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:41:30,978] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:41:30,978] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:41:30,978] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:46:30,979] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 15:46:30,979] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 15:46:30,980] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:46:30,980] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:46:30,980] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:46:30,980] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:46:30,981] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:46:30,981] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:51:30,986] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 15:51:30,986] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 15:51:30,987] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:51:30,988] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:51:30,988] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:51:30,988] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:51:30,988] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:51:30,988] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:56:30,993] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-01 15:56:30,993] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-01 15:56:30,994] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:56:30,994] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:56:30,994] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:56:30,994] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-01 15:56:30,994] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-01 15:56:30,994] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:02:13,287] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2023-12-04 11:02:13,612] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-12-04 11:02:13,621] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 11:02:13,623] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 11:02:13,731] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2023-12-04 11:02:13,935] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2023-12-04 11:02:13,980] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-12-04 11:02:14,000] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 11:02:14,003] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 11:02:14,006] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2023-12-04 11:02:14,054] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 8 and epoch zk version is now 8 (kafka.controller.KafkaController)
[2023-12-04 11:02:14,057] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2023-12-04 11:02:14,064] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-12-04 11:02:14,070] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-12-04 11:02:14,073] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2023-12-04 11:02:14,081] INFO [Controller id=2] Initialized broker epochs cache: HashMap(2 -> 884) (kafka.controller.KafkaController)
[2023-12-04 11:02:14,106] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-04 11:02:14,109] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2023-12-04 11:02:14,124] DEBUG [Controller id=2] Register BrokerModifications handler for Set(2) (kafka.controller.KafkaController)
[2023-12-04 11:02:14,155] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2023-12-04 11:02:14,158] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 11:02:14,162] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 11:02:14,164] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 11:02:14,166] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 11:02:14,166] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 11:02:14,175] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 11:02:14,176] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 11:02:14,176] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 11:02:14,182] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 11:02:14,183] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 11:02:14,184] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 11:02:14,189] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2023-12-04 11:02:14,222] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-12-04 11:02:14,231] DEBUG [Controller id=0] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-04 11:02:14,301] INFO [Controller id=2] Currently active brokers in the cluster: Set(2) (kafka.controller.KafkaController)
[2023-12-04 11:02:14,302] INFO [Controller id=2] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-12-04 11:02:14,302] INFO [Controller id=2] Current list of topics in the cluster: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.KafkaController)
[2023-12-04 11:02:14,303] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-12-04 11:02:14,310] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-12-04 11:02:14,311] INFO [Controller id=2] List of topics ineligible for deletion: ordersTopic,__consumer_offsets,failureTopic (kafka.controller.KafkaController)
[2023-12-04 11:02:14,311] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-12-04 11:02:14,313] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.TopicDeletionManager)
[2023-12-04 11:02:14,314] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2023-12-04 11:02:14,365] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2023-12-04 11:02:14,370] INFO [RequestSendThread controllerId=2] Controller 2 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 11:02:14,370] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 11:02:14,386] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 11:02:14,513] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 11:02:14,708] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=2,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=2,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=0,Replica=1] -> OfflineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 11:02:14,782] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 11:02:14,787] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 11:02:14,938] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OfflinePartition, __consumer_offsets-46 -> OfflinePartition, __consumer_offsets-9 -> OfflinePartition, __consumer_offsets-42 -> OfflinePartition, __consumer_offsets-21 -> OfflinePartition, ordersTopic-0 -> OnlinePartition, failureTopic-0 -> OnlinePartition, __consumer_offsets-17 -> OnlinePartition, __consumer_offsets-30 -> OfflinePartition, __consumer_offsets-26 -> OnlinePartition, __consumer_offsets-5 -> OnlinePartition, __consumer_offsets-38 -> OnlinePartition, __consumer_offsets-1 -> OfflinePartition, __consumer_offsets-34 -> OfflinePartition, __consumer_offsets-16 -> OfflinePartition, __consumer_offsets-45 -> OfflinePartition, __consumer_offsets-12 -> OfflinePartition, __consumer_offsets-41 -> OnlinePartition, __consumer_offsets-24 -> OfflinePartition, ordersTopic-1 -> OnlinePartition, __consumer_offsets-20 -> OnlinePartition, __consumer_offsets-49 -> OfflinePartition, failureTopic-1 -> OnlinePartition, __consumer_offsets-0 -> OfflinePartition, __consumer_offsets-29 -> OnlinePartition, __consumer_offsets-25 -> OfflinePartition, __consumer_offsets-8 -> OnlinePartition, __consumer_offsets-37 -> OfflinePartition, __consumer_offsets-4 -> OfflinePartition, __consumer_offsets-33 -> OfflinePartition, __consumer_offsets-15 -> OfflinePartition, __consumer_offsets-48 -> OfflinePartition, __consumer_offsets-11 -> OnlinePartition, __consumer_offsets-44 -> OnlinePartition, __consumer_offsets-23 -> OnlinePartition, __consumer_offsets-19 -> OfflinePartition, ordersTopic-2 -> OnlinePartition, failureTopic-2 -> OnlinePartition, __consumer_offsets-32 -> OnlinePartition, __consumer_offsets-28 -> OfflinePartition, __consumer_offsets-7 -> OfflinePartition, __consumer_offsets-40 -> OfflinePartition, __consumer_offsets-3 -> OfflinePartition, __consumer_offsets-36 -> OfflinePartition, __consumer_offsets-47 -> OnlinePartition, __consumer_offsets-14 -> OnlinePartition, __consumer_offsets-43 -> OfflinePartition, __consumer_offsets-10 -> OfflinePartition, failureTopic-3 -> OnlinePartition, __consumer_offsets-22 -> OfflinePartition, ordersTopic-3 -> OnlinePartition, __consumer_offsets-18 -> OfflinePartition, __consumer_offsets-31 -> OfflinePartition, __consumer_offsets-27 -> OfflinePartition, __consumer_offsets-39 -> OfflinePartition, __consumer_offsets-6 -> OfflinePartition, __consumer_offsets-35 -> OnlinePartition, __consumer_offsets-2 -> OnlinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 11:02:14,939] INFO [Controller id=2] Ready to serve as the new controller with epoch 8 (kafka.controller.KafkaController)
[2023-12-04 11:02:14,949] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-12-04 11:02:14,949] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-12-04 11:02:14,950] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-12-04 11:02:14,950] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-12-04 11:02:14,990] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-12-04 11:02:15,010] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-12-04 11:02:15,025] INFO [Controller id=2] Newly added brokers: 0,1, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-12-04 11:02:15,027] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-12-04 11:02:15,031] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-12-04 11:02:15,077] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2023-12-04 11:02:15,109] INFO [Controller id=2] New broker startup callback for 0,1 (kafka.controller.KafkaController)
[2023-12-04 11:02:15,118] INFO [RequestSendThread controllerId=2] Controller 2 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 11:02:15,140] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2023-12-04 11:02:15,142] INFO [RequestSendThread controllerId=2] Controller 2 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 11:02:15,291] DEBUG [Controller id=2] Register BrokerModifications handler for List(0, 1) (kafka.controller.KafkaController)
[2023-12-04 11:02:15,296] INFO [Controller id=2] Updated broker epochs cache: HashMap(0 -> 889, 1 -> 887, 2 -> 884) (kafka.controller.KafkaController)
[2023-12-04 11:02:16,059] DEBUG [Controller id=2] Updating ISRs for partitions: Set(failureTopic-2). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,088] DEBUG [Controller id=2] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=2, leaderEpoch=16, isr=List(2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=25). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,118] DEBUG [Controller id=2] Updating ISRs for partitions: Set(ordersTopic-1, ordersTopic-2, ordersTopic-3). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,124] DEBUG [Controller id=2] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=2, leaderEpoch=16, isr=List(2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=25). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,124] DEBUG [Controller id=2] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=2, leaderEpoch=17, isr=List(2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=26). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,124] DEBUG [Controller id=2] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=2, leaderEpoch=15, isr=List(2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=24). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,158] DEBUG [Controller id=2] Updating ISRs for partitions: Set(failureTopic-3, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,212] DEBUG [Controller id=2] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=2, leaderEpoch=17, isr=List(2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=26). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,212] DEBUG [Controller id=2] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=2, leaderEpoch=16, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=26). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,527] DEBUG [Controller id=2] Updating ISRs for partitions: Set(ordersTopic-0). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,537] DEBUG [Controller id=2] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=2, leaderEpoch=15, isr=List(2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=24). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,559] DEBUG [Controller id=2] Updating ISRs for partitions: Set(failureTopic-3, failureTopic-1). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,563] DEBUG [Controller id=2] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=2, leaderEpoch=17, isr=List(2, 0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=27). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,563] DEBUG [Controller id=2] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=2, leaderEpoch=15, isr=List(2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=24). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,584] DEBUG [Controller id=2] Updating ISRs for partitions: Set(failureTopic-0). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,588] DEBUG [Controller id=2] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=2, leaderEpoch=17, isr=List(2, 1), leaderRecoveryState=RECOVERED, partitionEpoch=26). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,653] DEBUG [Controller id=2] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,660] DEBUG [Controller id=2] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=2, leaderEpoch=15, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=25). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,665] DEBUG [Controller id=2] Updating ISRs for partitions: Set(ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-1). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,682] DEBUG [Controller id=2] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=2, leaderEpoch=17, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=27). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,682] DEBUG [Controller id=2] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=2, leaderEpoch=15, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=25). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,682] DEBUG [Controller id=2] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=2, leaderEpoch=17, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=27). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,682] DEBUG [Controller id=2] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=2, leaderEpoch=16, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=26). (kafka.controller.KafkaController)
[2023-12-04 11:02:16,682] DEBUG [Controller id=2] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=2, leaderEpoch=15, isr=List(2, 1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=25). (kafka.controller.KafkaController)
[2023-12-04 11:02:20,065] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 11:02:20,065] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 11:02:20,069] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap(ordersTopic-3 -> List(0, 2, 1), failureTopic-1 -> List(0, 2, 1), ordersTopic-0 -> List(0, 1, 2)) (kafka.controller.KafkaController)
[2023-12-04 11:02:20,071] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.15 (kafka.controller.KafkaController)
[2023-12-04 11:02:20,073] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions ordersTopic-3,failureTopic-1,ordersTopic-0 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-04 11:02:20,095] INFO [Controller id=2] Partition ordersTopic-3 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-12-04 11:02:20,096] INFO [Controller id=2] Partition failureTopic-1 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-12-04 11:02:20,096] INFO [Controller id=2] Partition ordersTopic-0 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-12-04 11:02:20,096] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap(failureTopic-0 -> List(1, 0, 2), ordersTopic-2 -> List(1, 2, 0), failureTopic-3 -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2023-12-04 11:02:20,096] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.15 (kafka.controller.KafkaController)
[2023-12-04 11:02:20,096] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions failureTopic-0,ordersTopic-2,failureTopic-3 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-04 11:02:20,126] INFO [Controller id=2] Partition failureTopic-0 completed preferred replica leader election. New leader is 1 (kafka.controller.KafkaController)
[2023-12-04 11:02:20,126] INFO [Controller id=2] Partition ordersTopic-2 completed preferred replica leader election. New leader is 1 (kafka.controller.KafkaController)
[2023-12-04 11:02:20,126] INFO [Controller id=2] Partition failureTopic-3 completed preferred replica leader election. New leader is 1 (kafka.controller.KafkaController)
[2023-12-04 11:02:20,126] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:02:20,126] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:07:20,129] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 11:07:20,129] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 11:07:20,130] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:07:20,130] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:07:20,130] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:07:20,130] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:07:20,130] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:07:20,130] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:12:19,579] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 11:12:19,579] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 11:12:19,580] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:12:19,580] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:12:19,580] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:12:19,580] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:12:19,580] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:12:19,580] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:17:19,524] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 11:17:19,524] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 11:17:19,526] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:17:19,526] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:17:19,526] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:17:19,526] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:17:19,526] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:17:19,526] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:22:19,537] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 11:22:19,537] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 11:22:19,540] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:22:19,541] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:22:19,541] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:22:19,541] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:22:19,541] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:22:19,541] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:27:19,553] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 11:27:19,553] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 11:27:19,554] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:27:19,554] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:27:19,554] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:27:19,554] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:27:19,554] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:27:19,554] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:32:19,564] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 11:32:19,564] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 11:32:19,565] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:32:19,565] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:32:19,565] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:32:19,565] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:32:19,565] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:32:19,565] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:37:19,579] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 11:37:19,579] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 11:37:19,581] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:37:19,581] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:37:19,581] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:37:19,581] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:37:19,581] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:37:19,581] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:42:19,606] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 11:42:19,606] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 11:42:19,607] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:42:19,607] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:42:19,607] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:42:19,607] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:42:19,607] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:42:19,607] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:47:19,613] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 11:47:19,613] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 11:47:19,614] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:47:19,614] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:47:19,614] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:47:19,614] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:47:19,614] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:47:19,614] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:52:19,620] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 11:52:19,620] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 11:52:19,621] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:52:19,621] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:52:19,622] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:52:19,622] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:52:19,622] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:52:19,622] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:57:19,640] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 11:57:19,640] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 11:57:19,640] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:57:19,640] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:57:19,640] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:57:19,640] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 11:57:19,640] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 11:57:19,640] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:02:19,649] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 12:02:19,659] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 12:02:19,659] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:02:19,659] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:02:19,659] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:02:19,660] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:02:19,660] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:02:19,660] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:07:20,654] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 12:07:20,658] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 12:07:20,658] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:07:20,658] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:07:20,658] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:07:20,658] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:07:20,658] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:07:20,658] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:12:20,669] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 12:12:20,669] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 12:12:20,670] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:12:20,670] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:12:20,670] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:12:20,670] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:12:20,670] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:12:20,670] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:17:20,674] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 12:17:20,674] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 12:17:20,675] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:17:20,675] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:17:20,675] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:17:20,675] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:17:20,675] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:17:20,675] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:22:20,688] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 12:22:20,688] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 12:22:20,688] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:22:20,688] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:22:20,688] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:22:20,688] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:22:20,688] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:22:20,688] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:27:20,695] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 12:27:20,695] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 12:27:20,696] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:27:20,696] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:27:20,696] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:27:20,696] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:27:20,696] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:27:20,696] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:32:20,707] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 12:32:20,707] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 12:32:20,709] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:32:20,709] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:32:20,709] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:32:20,709] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:32:20,709] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:32:20,709] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:37:20,713] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 12:37:20,713] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 12:37:20,714] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:37:20,714] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:37:20,714] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:37:20,714] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:37:20,714] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:37:20,714] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:42:20,744] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 12:42:20,744] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 12:42:20,745] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:42:20,745] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:42:20,746] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:42:20,746] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:42:20,746] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:42:20,746] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:47:20,748] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 12:47:20,748] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 12:47:20,749] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:47:20,749] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:47:20,749] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:47:20,749] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:47:20,749] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:47:20,749] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:52:20,755] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 12:52:20,755] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 12:52:20,756] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:52:20,756] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:52:20,756] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:52:20,756] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:52:20,756] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:52:20,756] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:57:20,776] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 12:57:20,776] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 12:57:20,778] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:57:20,778] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:57:20,778] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:57:20,778] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 12:57:20,778] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 12:57:20,778] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 13:02:20,800] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 13:02:20,814] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 13:02:20,815] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 13:02:20,815] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 13:02:20,815] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 13:02:20,815] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 13:02:20,815] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 13:02:20,815] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:06:25,481] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2023-12-04 14:06:25,513] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-12-04 14:06:25,514] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 14:06:25,514] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:06:25,514] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2023-12-04 14:06:25,698] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 9 and epoch zk version is now 9 (kafka.controller.KafkaController)
[2023-12-04 14:06:25,702] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2023-12-04 14:06:25,712] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-12-04 14:06:25,720] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-12-04 14:06:25,723] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2023-12-04 14:06:25,742] INFO [Controller id=1] Initialized broker epochs cache: HashMap(1 -> 1007) (kafka.controller.KafkaController)
[2023-12-04 14:06:25,781] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2023-12-04 14:06:25,891] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-12-04 14:06:25,936] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2023-12-04 14:06:25,937] INFO [Controller id=1] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-12-04 14:06:25,937] INFO [Controller id=1] Current list of topics in the cluster: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.KafkaController)
[2023-12-04 14:06:25,938] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-12-04 14:06:25,952] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-12-04 14:06:25,953] INFO [Controller id=1] List of topics ineligible for deletion: ordersTopic,__consumer_offsets,failureTopic (kafka.controller.KafkaController)
[2023-12-04 14:06:25,954] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-12-04 14:06:25,955] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.TopicDeletionManager)
[2023-12-04 14:06:25,956] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2023-12-04 14:06:25,961] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,020] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,020] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:06:26,041] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:06:26,087] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:06:26,231] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=1] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:06:26,232] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 14:06:26,239] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 14:06:26,329] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OfflinePartition, __consumer_offsets-46 -> OfflinePartition, __consumer_offsets-9 -> OnlinePartition, __consumer_offsets-42 -> OnlinePartition, __consumer_offsets-21 -> OnlinePartition, ordersTopic-0 -> OnlinePartition, failureTopic-0 -> OnlinePartition, __consumer_offsets-17 -> OfflinePartition, __consumer_offsets-30 -> OnlinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-5 -> OfflinePartition, __consumer_offsets-38 -> OfflinePartition, __consumer_offsets-1 -> OfflinePartition, __consumer_offsets-34 -> OfflinePartition, __consumer_offsets-16 -> OfflinePartition, __consumer_offsets-45 -> OnlinePartition, __consumer_offsets-12 -> OnlinePartition, __consumer_offsets-41 -> OfflinePartition, __consumer_offsets-24 -> OnlinePartition, ordersTopic-1 -> OnlinePartition, __consumer_offsets-20 -> OfflinePartition, __consumer_offsets-49 -> OfflinePartition, failureTopic-1 -> OnlinePartition, __consumer_offsets-0 -> OnlinePartition, __consumer_offsets-29 -> OfflinePartition, __consumer_offsets-25 -> OfflinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-37 -> OfflinePartition, __consumer_offsets-4 -> OfflinePartition, __consumer_offsets-33 -> OnlinePartition, __consumer_offsets-15 -> OnlinePartition, __consumer_offsets-48 -> OnlinePartition, __consumer_offsets-11 -> OfflinePartition, __consumer_offsets-44 -> OfflinePartition, __consumer_offsets-23 -> OfflinePartition, __consumer_offsets-19 -> OfflinePartition, ordersTopic-2 -> OnlinePartition, failureTopic-2 -> OnlinePartition, __consumer_offsets-32 -> OfflinePartition, __consumer_offsets-28 -> OfflinePartition, __consumer_offsets-7 -> OfflinePartition, __consumer_offsets-40 -> OfflinePartition, __consumer_offsets-3 -> OnlinePartition, __consumer_offsets-36 -> OnlinePartition, __consumer_offsets-47 -> OfflinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-43 -> OfflinePartition, __consumer_offsets-10 -> OfflinePartition, failureTopic-3 -> OnlinePartition, __consumer_offsets-22 -> OfflinePartition, ordersTopic-3 -> OnlinePartition, __consumer_offsets-18 -> OnlinePartition, __consumer_offsets-31 -> OfflinePartition, __consumer_offsets-27 -> OnlinePartition, __consumer_offsets-39 -> OnlinePartition, __consumer_offsets-6 -> OnlinePartition, __consumer_offsets-35 -> OfflinePartition, __consumer_offsets-2 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 14:06:26,329] INFO [Controller id=1] Ready to serve as the new controller with epoch 9 (kafka.controller.KafkaController)
[2023-12-04 14:06:26,347] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-12-04 14:06:26,348] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-12-04 14:06:26,348] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-12-04 14:06:26,349] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-12-04 14:06:26,355] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-12-04 14:06:26,375] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-12-04 14:06:26,442] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2023-12-04 14:06:26,445] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2023-12-04 14:06:26,467] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 14:06:26,468] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:06:26,470] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,471] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,470] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2023-12-04 14:06:26,471] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,472] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-12-04 14:06:26,472] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 14:06:26,474] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:06:26,475] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2023-12-04 14:06:26,485] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,485] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,485] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,489] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,489] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,490] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,493] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2023-12-04 14:06:26,558] INFO [Controller id=1] Newly added brokers: 0, deleted brokers: , bounced brokers: , all live brokers: 0,1 (kafka.controller.KafkaController)
[2023-12-04 14:06:26,558] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-12-04 14:06:26,563] INFO [Controller id=1] New broker startup callback for 0 (kafka.controller.KafkaController)
[2023-12-04 14:06:26,582] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,583] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 14:06:26,601] DEBUG [Controller id=0] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-04 14:06:26,607] DEBUG [Controller id=2] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-04 14:06:27,586] DEBUG [Controller id=1] Register BrokerModifications handler for List(0) (kafka.controller.KafkaController)
[2023-12-04 14:06:27,594] INFO [Controller id=1] Updated broker epochs cache: HashMap(0 -> 1066, 1 -> 1007) (kafka.controller.KafkaController)
[2023-12-04 14:06:27,621] INFO [Controller id=1] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-12-04 14:06:27,621] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-12-04 14:06:27,628] INFO [Controller id=1] New broker startup callback for 2 (kafka.controller.KafkaController)
[2023-12-04 14:06:27,676] DEBUG [Controller id=1] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2023-12-04 14:06:27,678] INFO [Controller id=1] Updated broker epochs cache: HashMap(0 -> 1066, 1 -> 1007, 2 -> 1067) (kafka.controller.KafkaController)
[2023-12-04 14:06:27,711] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-12-04 14:06:27,715] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 14:06:27,771] DEBUG [Controller id=1] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-12-04 14:06:27,779] DEBUG [Controller id=1] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=19, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=30). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,310] DEBUG [Controller id=1] Updating ISRs for partitions: Set(failureTopic-3, ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-1, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,345] DEBUG [Controller id=1] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=20, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=31). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,345] DEBUG [Controller id=1] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=19, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=30). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,345] DEBUG [Controller id=1] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=19, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=30). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,345] DEBUG [Controller id=1] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=20, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=31). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,345] DEBUG [Controller id=1] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=19, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=30). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,345] DEBUG [Controller id=1] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=19, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=30). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,345] DEBUG [Controller id=1] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=20, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=31). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,788] DEBUG [Controller id=1] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,791] DEBUG [Controller id=1] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=19, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=31). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,795] DEBUG [Controller id=1] Updating ISRs for partitions: Set(failureTopic-3, ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-1, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,805] DEBUG [Controller id=1] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=20, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=32). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,805] DEBUG [Controller id=1] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=19, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=31). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,805] DEBUG [Controller id=1] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=19, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=31). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,805] DEBUG [Controller id=1] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=20, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=32). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,805] DEBUG [Controller id=1] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=19, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=31). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,805] DEBUG [Controller id=1] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=19, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=31). (kafka.controller.KafkaController)
[2023-12-04 14:06:29,805] DEBUG [Controller id=1] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=20, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=32). (kafka.controller.KafkaController)
[2023-12-04 14:22:23,676] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 14:22:23,676] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 14:22:23,684] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap(ordersTopic-3 -> List(0, 2, 1), failureTopic-1 -> List(0, 2, 1), ordersTopic-0 -> List(0, 1, 2)) (kafka.controller.KafkaController)
[2023-12-04 14:22:23,687] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.15 (kafka.controller.KafkaController)
[2023-12-04 14:22:23,688] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions ordersTopic-3,failureTopic-1,ordersTopic-0 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-04 14:22:25,054] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition ordersTopic-0 (kafka.controller.KafkaController)
org.apache.zookeeper.KeeperException$SessionExpiredException: KeeperErrorCode = Session expired for /brokers/topics/ordersTopic/partitions/0/state
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:134)
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:54)
	at kafka.zookeeper.AsyncResponse.resultException(ZooKeeperClient.scala:559)
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$2(PartitionStateMachine.scala:403)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:575)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:573)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:379)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:336)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:242)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:162)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:885)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1276)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5$adapted(KafkaController.scala:1258)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.immutable.HashMap.foreachEntry(HashMap.scala:1092)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1258)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1294)
	at kafka.controller.KafkaController.process(KafkaController.scala:2554)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:53)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:131)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:134)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1$adapted(ControllerEventManager.scala:134)
	at com.yammer.metrics.core.Timer.time(Timer.java:91)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:134)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-04 14:22:25,054] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition failureTopic-1 (kafka.controller.KafkaController)
org.apache.zookeeper.KeeperException$SessionExpiredException: KeeperErrorCode = Session expired for /brokers/topics/failureTopic/partitions/1/state
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:134)
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:54)
	at kafka.zookeeper.AsyncResponse.resultException(ZooKeeperClient.scala:559)
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$2(PartitionStateMachine.scala:403)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:575)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:573)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:379)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:336)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:242)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:162)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:885)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1276)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5$adapted(KafkaController.scala:1258)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.immutable.HashMap.foreachEntry(HashMap.scala:1092)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1258)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1294)
	at kafka.controller.KafkaController.process(KafkaController.scala:2554)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:53)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:131)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:134)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1$adapted(ControllerEventManager.scala:134)
	at com.yammer.metrics.core.Timer.time(Timer.java:91)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:134)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-04 14:22:25,054] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition ordersTopic-3 (kafka.controller.KafkaController)
org.apache.zookeeper.KeeperException$SessionExpiredException: KeeperErrorCode = Session expired for /brokers/topics/ordersTopic/partitions/3/state
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:134)
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:54)
	at kafka.zookeeper.AsyncResponse.resultException(ZooKeeperClient.scala:559)
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$2(PartitionStateMachine.scala:403)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:575)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:573)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:379)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:336)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:242)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:162)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:885)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1276)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5$adapted(KafkaController.scala:1258)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.immutable.HashMap.foreachEntry(HashMap.scala:1092)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1258)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1294)
	at kafka.controller.KafkaController.process(KafkaController.scala:2554)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:53)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:131)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:134)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1$adapted(ControllerEventManager.scala:134)
	at com.yammer.metrics.core.Timer.time(Timer.java:91)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:134)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-04 14:22:25,055] WARN [Controller id=1] Partition ordersTopic-3 failed to complete preferred replica leader election to 0. Leader is still 1 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,055] WARN [Controller id=1] Partition failureTopic-1 failed to complete preferred replica leader election to 0. Leader is still 1 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,055] WARN [Controller id=1] Partition ordersTopic-0 failed to complete preferred replica leader election to 0. Leader is still 1 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,055] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:22:25,055] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,056] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap(failureTopic-2 -> List(2, 1, 0), ordersTopic-1 -> List(2, 0, 1)) (kafka.controller.KafkaController)
[2023-12-04 14:22:25,056] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.1111111111111111 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,056] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions failureTopic-2,ordersTopic-1 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-04 14:22:25,163] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition ordersTopic-1 (kafka.controller.KafkaController)
org.apache.zookeeper.KeeperException$SessionExpiredException: KeeperErrorCode = Session expired for /brokers/topics/ordersTopic/partitions/1/state
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:134)
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:54)
	at kafka.zookeeper.AsyncResponse.resultException(ZooKeeperClient.scala:559)
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$2(PartitionStateMachine.scala:403)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:575)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:573)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:379)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:336)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:242)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:162)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:885)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1276)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5$adapted(KafkaController.scala:1258)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.immutable.HashMap.foreachEntry(HashMap.scala:1092)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1258)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1294)
	at kafka.controller.KafkaController.process(KafkaController.scala:2554)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:53)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:131)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:134)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1$adapted(ControllerEventManager.scala:134)
	at com.yammer.metrics.core.Timer.time(Timer.java:91)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:134)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-04 14:22:25,164] ERROR [Controller id=1] Error completing replica leader election (PREFERRED) for partition failureTopic-2 (kafka.controller.KafkaController)
org.apache.zookeeper.KeeperException$SessionExpiredException: KeeperErrorCode = Session expired for /brokers/topics/failureTopic/partitions/2/state
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:134)
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:54)
	at kafka.zookeeper.AsyncResponse.resultException(ZooKeeperClient.scala:559)
	at kafka.controller.ZkPartitionStateMachine.$anonfun$doElectLeaderForPartitions$2(PartitionStateMachine.scala:403)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:575)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:573)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at kafka.controller.ZkPartitionStateMachine.doElectLeaderForPartitions(PartitionStateMachine.scala:379)
	at kafka.controller.ZkPartitionStateMachine.electLeaderForPartitions(PartitionStateMachine.scala:336)
	at kafka.controller.ZkPartitionStateMachine.doHandleStateChanges(PartitionStateMachine.scala:242)
	at kafka.controller.ZkPartitionStateMachine.handleStateChanges(PartitionStateMachine.scala:162)
	at kafka.controller.KafkaController.onReplicaElection(KafkaController.scala:885)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5(KafkaController.scala:1276)
	at kafka.controller.KafkaController.$anonfun$checkAndTriggerAutoLeaderRebalance$5$adapted(KafkaController.scala:1258)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.immutable.HashMap.foreachEntry(HashMap.scala:1092)
	at kafka.controller.KafkaController.checkAndTriggerAutoLeaderRebalance(KafkaController.scala:1258)
	at kafka.controller.KafkaController.processAutoPreferredReplicaLeaderElection(KafkaController.scala:1294)
	at kafka.controller.KafkaController.process(KafkaController.scala:2554)
	at kafka.controller.QueuedEvent.process(ControllerEventManager.scala:53)
	at kafka.controller.ControllerEventManager$ControllerEventThread.process$1(ControllerEventManager.scala:131)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1(ControllerEventManager.scala:134)
	at kafka.controller.ControllerEventManager$ControllerEventThread.$anonfun$doWork$1$adapted(ControllerEventManager.scala:134)
	at com.yammer.metrics.core.Timer.time(Timer.java:91)
	at kafka.controller.ControllerEventManager$ControllerEventThread.doWork(ControllerEventManager.scala:134)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-04 14:22:25,164] WARN [Controller id=1] Partition failureTopic-2 failed to complete preferred replica leader election to 2. Leader is still 1 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,164] WARN [Controller id=1] Partition ordersTopic-1 failed to complete preferred replica leader election to 2. Leader is still 1 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,164] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2023-12-04 14:22:25,164] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2023-12-04 14:22:25,165] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 14:22:25,166] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:22:25,166] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,167] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,169] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,171] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,173] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,174] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,176] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,176] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,176] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,178] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2023-12-04 14:22:25,204] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 10 and epoch zk version is now 10 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,205] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2023-12-04 14:22:25,207] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-12-04 14:22:25,208] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-12-04 14:22:25,209] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2023-12-04 14:22:25,212] INFO [Controller id=1] Initialized broker epochs cache: HashMap(1 -> 1121) (kafka.controller.KafkaController)
[2023-12-04 14:22:25,215] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2023-12-04 14:22:25,236] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-12-04 14:22:25,240] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2023-12-04 14:22:25,240] INFO [Controller id=1] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-12-04 14:22:25,240] INFO [Controller id=1] Current list of topics in the cluster: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.KafkaController)
[2023-12-04 14:22:25,240] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-12-04 14:22:25,242] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,242] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-12-04 14:22:25,242] INFO [Controller id=1] List of topics ineligible for deletion: ordersTopic,__consumer_offsets,failureTopic (kafka.controller.KafkaController)
[2023-12-04 14:22:25,242] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-12-04 14:22:25,242] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.TopicDeletionManager)
[2023-12-04 14:22:25,242] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2023-12-04 14:22:25,242] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:22:25,244] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,257] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:22:25,260] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:22:25,321] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=1] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:22:25,321] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 14:22:25,323] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 14:22:25,385] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OfflinePartition, __consumer_offsets-46 -> OfflinePartition, __consumer_offsets-9 -> OnlinePartition, __consumer_offsets-42 -> OnlinePartition, __consumer_offsets-21 -> OnlinePartition, ordersTopic-0 -> OnlinePartition, failureTopic-0 -> OnlinePartition, __consumer_offsets-17 -> OfflinePartition, __consumer_offsets-30 -> OnlinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-5 -> OfflinePartition, __consumer_offsets-38 -> OfflinePartition, __consumer_offsets-1 -> OfflinePartition, __consumer_offsets-34 -> OfflinePartition, __consumer_offsets-16 -> OfflinePartition, __consumer_offsets-45 -> OnlinePartition, __consumer_offsets-12 -> OnlinePartition, __consumer_offsets-41 -> OfflinePartition, __consumer_offsets-24 -> OnlinePartition, ordersTopic-1 -> OnlinePartition, __consumer_offsets-20 -> OfflinePartition, __consumer_offsets-49 -> OfflinePartition, failureTopic-1 -> OnlinePartition, __consumer_offsets-0 -> OnlinePartition, __consumer_offsets-29 -> OfflinePartition, __consumer_offsets-25 -> OfflinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-37 -> OfflinePartition, __consumer_offsets-4 -> OfflinePartition, __consumer_offsets-33 -> OnlinePartition, __consumer_offsets-15 -> OnlinePartition, __consumer_offsets-48 -> OnlinePartition, __consumer_offsets-11 -> OfflinePartition, __consumer_offsets-44 -> OfflinePartition, __consumer_offsets-23 -> OfflinePartition, __consumer_offsets-19 -> OfflinePartition, ordersTopic-2 -> OnlinePartition, failureTopic-2 -> OnlinePartition, __consumer_offsets-32 -> OfflinePartition, __consumer_offsets-28 -> OfflinePartition, __consumer_offsets-7 -> OfflinePartition, __consumer_offsets-40 -> OfflinePartition, __consumer_offsets-3 -> OnlinePartition, __consumer_offsets-36 -> OnlinePartition, __consumer_offsets-47 -> OfflinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-43 -> OfflinePartition, __consumer_offsets-10 -> OfflinePartition, failureTopic-3 -> OnlinePartition, __consumer_offsets-22 -> OfflinePartition, ordersTopic-3 -> OnlinePartition, __consumer_offsets-18 -> OnlinePartition, __consumer_offsets-31 -> OfflinePartition, __consumer_offsets-27 -> OnlinePartition, __consumer_offsets-39 -> OnlinePartition, __consumer_offsets-6 -> OnlinePartition, __consumer_offsets-35 -> OfflinePartition, __consumer_offsets-2 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 14:22:25,385] INFO [Controller id=1] Ready to serve as the new controller with epoch 10 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,387] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-12-04 14:22:25,387] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-12-04 14:22:25,387] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-12-04 14:22:25,387] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-12-04 14:22:25,387] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-12-04 14:22:25,390] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-12-04 14:22:25,826] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2023-12-04 14:22:25,826] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-12-04 14:22:25,826] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 14:22:25,826] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:22:25,826] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2023-12-04 14:22:25,844] INFO [Controller id=1] Newly added brokers: 0, deleted brokers: , bounced brokers: , all live brokers: 0,1 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,844] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-12-04 14:22:25,849] DEBUG [Controller id=0] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-04 14:22:25,850] INFO [Controller id=1] New broker startup callback for 0 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,850] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,852] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,875] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2023-12-04 14:22:25,875] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-12-04 14:22:25,875] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 14:22:25,876] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 14:22:25,876] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2023-12-04 14:22:25,896] DEBUG [Controller id=1] Register BrokerModifications handler for List(0) (kafka.controller.KafkaController)
[2023-12-04 14:22:25,901] INFO [Controller id=1] Updated broker epochs cache: HashMap(0 -> 1174, 1 -> 1121) (kafka.controller.KafkaController)
[2023-12-04 14:22:25,902] DEBUG [Controller id=1] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-12-04 14:22:25,909] DEBUG [Controller id=1] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=21, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=34). (kafka.controller.KafkaController)
[2023-12-04 14:22:25,913] DEBUG [Controller id=1] Updating ISRs for partitions: Set(failureTopic-3, ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-1, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-04 14:22:25,920] DEBUG [Controller id=1] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=22, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=35). (kafka.controller.KafkaController)
[2023-12-04 14:22:25,920] DEBUG [Controller id=1] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=21, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=34). (kafka.controller.KafkaController)
[2023-12-04 14:22:25,920] DEBUG [Controller id=1] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=21, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=34). (kafka.controller.KafkaController)
[2023-12-04 14:22:25,920] DEBUG [Controller id=1] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=22, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=35). (kafka.controller.KafkaController)
[2023-12-04 14:22:25,920] DEBUG [Controller id=1] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=21, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=34). (kafka.controller.KafkaController)
[2023-12-04 14:22:25,920] DEBUG [Controller id=1] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=21, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=34). (kafka.controller.KafkaController)
[2023-12-04 14:22:25,920] DEBUG [Controller id=1] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=22, isr=List(1, 0), leaderRecoveryState=RECOVERED, partitionEpoch=35). (kafka.controller.KafkaController)
[2023-12-04 14:22:25,952] DEBUG [Controller id=2] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-04 14:22:25,953] INFO [Controller id=1] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,953] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-12-04 14:22:25,956] INFO [Controller id=1] New broker startup callback for 2 (kafka.controller.KafkaController)
[2023-12-04 14:22:25,981] DEBUG [Controller id=1] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2023-12-04 14:22:25,986] INFO [Controller id=1] Updated broker epochs cache: HashMap(0 -> 1174, 1 -> 1121, 2 -> 1201) (kafka.controller.KafkaController)
[2023-12-04 14:22:25,986] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,989] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 14:22:25,998] DEBUG [Controller id=1] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-12-04 14:22:26,001] DEBUG [Controller id=1] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=21, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=35). (kafka.controller.KafkaController)
[2023-12-04 14:22:26,006] DEBUG [Controller id=1] Updating ISRs for partitions: Set(failureTopic-3, ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-1, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-04 14:22:26,016] DEBUG [Controller id=1] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=22, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=36). (kafka.controller.KafkaController)
[2023-12-04 14:22:26,016] DEBUG [Controller id=1] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=21, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=35). (kafka.controller.KafkaController)
[2023-12-04 14:22:26,016] DEBUG [Controller id=1] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=21, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=35). (kafka.controller.KafkaController)
[2023-12-04 14:22:26,016] DEBUG [Controller id=1] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=22, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=36). (kafka.controller.KafkaController)
[2023-12-04 14:22:26,016] DEBUG [Controller id=1] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=21, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=35). (kafka.controller.KafkaController)
[2023-12-04 14:22:26,016] DEBUG [Controller id=1] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=21, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=35). (kafka.controller.KafkaController)
[2023-12-04 14:22:26,016] DEBUG [Controller id=1] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=22, isr=List(1, 0, 2), leaderRecoveryState=RECOVERED, partitionEpoch=36). (kafka.controller.KafkaController)
[2023-12-04 14:22:30,400] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 14:22:30,400] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 14:22:30,401] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap(ordersTopic-3 -> List(0, 2, 1), failureTopic-1 -> List(0, 2, 1), ordersTopic-0 -> List(0, 1, 2)) (kafka.controller.KafkaController)
[2023-12-04 14:22:30,401] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.15 (kafka.controller.KafkaController)
[2023-12-04 14:22:30,401] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions ordersTopic-3,failureTopic-1,ordersTopic-0 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-04 14:22:30,410] INFO [Controller id=1] Partition ordersTopic-3 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-12-04 14:22:30,410] INFO [Controller id=1] Partition failureTopic-1 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-12-04 14:22:30,410] INFO [Controller id=1] Partition ordersTopic-0 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-12-04 14:22:30,410] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:22:30,410] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:22:30,410] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap(failureTopic-2 -> List(2, 1, 0), ordersTopic-1 -> List(2, 0, 1)) (kafka.controller.KafkaController)
[2023-12-04 14:22:30,410] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.1111111111111111 (kafka.controller.KafkaController)
[2023-12-04 14:22:30,410] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions failureTopic-2,ordersTopic-1 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-04 14:22:30,417] INFO [Controller id=1] Partition failureTopic-2 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-12-04 14:22:30,417] INFO [Controller id=1] Partition ordersTopic-1 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-12-04 14:27:30,421] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 14:27:30,422] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 14:27:30,424] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:27:30,424] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:27:30,424] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:27:30,424] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:27:30,424] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:27:30,424] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:32:30,304] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 14:32:30,305] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 14:32:30,307] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:32:30,307] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:32:30,307] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:32:30,307] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:32:30,308] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:32:30,308] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:37:30,316] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 14:37:30,316] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 14:37:30,318] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:37:30,319] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:37:30,319] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:37:30,319] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:37:30,319] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:37:30,319] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:42:30,419] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 14:42:30,419] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 14:42:30,420] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:42:30,420] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:42:30,420] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:42:30,420] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:42:30,420] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:42:30,420] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:47:30,497] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 14:47:30,497] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 14:47:30,498] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:47:30,498] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:47:30,498] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:47:30,498] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:47:30,498] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:47:30,498] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:52:30,514] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 14:52:30,515] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 14:52:30,516] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:52:30,516] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:52:30,516] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:52:30,516] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:52:30,516] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:52:30,516] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:57:30,531] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 14:57:30,531] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 14:57:30,532] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:57:30,532] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:57:30,532] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:57:30,532] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 14:57:30,533] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 14:57:30,533] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:02:30,565] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 15:02:30,568] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 15:02:30,569] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:02:30,569] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:02:30,569] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:02:30,569] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:02:30,569] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:02:30,569] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:07:30,574] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 15:07:30,574] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 15:07:30,575] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:07:30,575] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:07:30,575] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:07:30,575] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:07:30,575] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:07:30,575] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:12:30,590] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 15:12:30,590] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 15:12:30,592] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:12:30,592] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:12:30,592] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:12:30,592] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:12:30,592] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:12:30,592] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:17:30,589] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 15:17:30,589] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 15:17:30,590] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:17:30,590] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:17:30,590] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:17:30,590] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:17:30,590] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:17:30,590] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:22:30,588] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 15:22:30,588] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 15:22:30,590] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:22:30,590] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:22:30,590] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:22:30,590] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:22:30,590] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:22:30,590] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:27:30,593] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 15:27:30,593] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 15:27:30,594] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:27:30,594] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:27:30,594] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:27:30,594] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:27:30,594] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:27:30,594] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:32:30,603] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 15:32:30,604] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 15:32:30,605] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:32:30,605] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:32:30,605] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:32:30,605] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:32:30,605] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:32:30,605] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:37:30,622] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 15:37:30,622] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 15:37:30,624] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:37:30,624] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:37:30,624] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:37:30,624] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:37:30,624] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:37:30,624] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:42:30,632] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 15:42:30,632] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 15:42:30,634] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:42:30,634] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:42:30,634] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:42:30,634] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:42:30,634] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:42:30,634] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:47:30,650] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 15:47:30,651] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 15:47:30,652] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:47:30,652] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:47:30,652] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:47:30,652] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 15:47:30,652] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 15:47:30,652] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 18:15:19,546] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2023-12-04 18:15:19,549] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2023-12-04 18:15:19,553] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 18:15:19,553] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 18:15:19,553] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,554] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,555] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,565] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,566] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,566] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,568] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,569] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,569] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,572] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2023-12-04 18:15:19,615] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 11 and epoch zk version is now 11 (kafka.controller.KafkaController)
[2023-12-04 18:15:19,616] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2023-12-04 18:15:19,617] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-12-04 18:15:19,618] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-12-04 18:15:19,619] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2023-12-04 18:15:19,623] INFO [Controller id=1] Initialized broker epochs cache: HashMap(1 -> 1235) (kafka.controller.KafkaController)
[2023-12-04 18:15:19,629] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2023-12-04 18:15:19,642] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-12-04 18:15:19,649] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2023-12-04 18:15:19,649] INFO [Controller id=1] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-12-04 18:15:19,649] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,650] INFO [Controller id=1] Current list of topics in the cluster: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.KafkaController)
[2023-12-04 18:15:19,650] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-12-04 18:15:19,652] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-12-04 18:15:19,652] INFO [Controller id=1] List of topics ineligible for deletion: ordersTopic,__consumer_offsets,failureTopic (kafka.controller.KafkaController)
[2023-12-04 18:15:19,652] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-12-04 18:15:19,652] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.TopicDeletionManager)
[2023-12-04 18:15:19,652] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2023-12-04 18:15:19,656] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 18:15:19,656] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 18:15:19,656] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,660] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 18:15:19,724] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=1] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 18:15:19,724] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 18:15:19,725] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 18:15:19,754] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2023-12-04 18:15:19,757] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-12-04 18:15:19,757] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 18:15:19,757] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 18:15:19,758] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2023-12-04 18:15:19,773] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OfflinePartition, __consumer_offsets-46 -> OfflinePartition, __consumer_offsets-9 -> OnlinePartition, __consumer_offsets-42 -> OnlinePartition, __consumer_offsets-21 -> OnlinePartition, ordersTopic-0 -> OnlinePartition, failureTopic-0 -> OnlinePartition, __consumer_offsets-17 -> OfflinePartition, __consumer_offsets-30 -> OnlinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-5 -> OfflinePartition, __consumer_offsets-38 -> OfflinePartition, __consumer_offsets-1 -> OfflinePartition, __consumer_offsets-34 -> OfflinePartition, __consumer_offsets-16 -> OfflinePartition, __consumer_offsets-45 -> OnlinePartition, __consumer_offsets-12 -> OnlinePartition, __consumer_offsets-41 -> OfflinePartition, __consumer_offsets-24 -> OnlinePartition, ordersTopic-1 -> OnlinePartition, __consumer_offsets-20 -> OfflinePartition, __consumer_offsets-49 -> OfflinePartition, failureTopic-1 -> OnlinePartition, __consumer_offsets-0 -> OnlinePartition, __consumer_offsets-29 -> OfflinePartition, __consumer_offsets-25 -> OfflinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-37 -> OfflinePartition, __consumer_offsets-4 -> OfflinePartition, __consumer_offsets-33 -> OnlinePartition, __consumer_offsets-15 -> OnlinePartition, __consumer_offsets-48 -> OnlinePartition, __consumer_offsets-11 -> OfflinePartition, __consumer_offsets-44 -> OfflinePartition, __consumer_offsets-23 -> OfflinePartition, __consumer_offsets-19 -> OfflinePartition, ordersTopic-2 -> OnlinePartition, failureTopic-2 -> OnlinePartition, __consumer_offsets-32 -> OfflinePartition, __consumer_offsets-28 -> OfflinePartition, __consumer_offsets-7 -> OfflinePartition, __consumer_offsets-40 -> OfflinePartition, __consumer_offsets-3 -> OnlinePartition, __consumer_offsets-36 -> OnlinePartition, __consumer_offsets-47 -> OfflinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-43 -> OfflinePartition, __consumer_offsets-10 -> OfflinePartition, failureTopic-3 -> OnlinePartition, __consumer_offsets-22 -> OfflinePartition, ordersTopic-3 -> OnlinePartition, __consumer_offsets-18 -> OnlinePartition, __consumer_offsets-31 -> OfflinePartition, __consumer_offsets-27 -> OnlinePartition, __consumer_offsets-39 -> OnlinePartition, __consumer_offsets-6 -> OnlinePartition, __consumer_offsets-35 -> OfflinePartition, __consumer_offsets-2 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 18:15:19,773] INFO [Controller id=1] Ready to serve as the new controller with epoch 11 (kafka.controller.KafkaController)
[2023-12-04 18:15:19,775] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-12-04 18:15:19,775] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-12-04 18:15:19,775] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-12-04 18:15:19,775] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-12-04 18:15:19,776] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-12-04 18:15:19,779] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-12-04 18:15:19,814] INFO [Controller id=1] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 1,2 (kafka.controller.KafkaController)
[2023-12-04 18:15:19,814] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-12-04 18:15:19,818] INFO [Controller id=1] New broker startup callback for 2 (kafka.controller.KafkaController)
[2023-12-04 18:15:19,819] DEBUG [Controller id=2] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-04 18:15:19,838] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,839] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 18:15:19,849] DEBUG [Controller id=1] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2023-12-04 18:15:19,852] INFO [Controller id=1] Updated broker epochs cache: HashMap(1 -> 1235, 2 -> 1293) (kafka.controller.KafkaController)
[2023-12-04 18:15:19,865] DEBUG [Controller id=1] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-12-04 18:15:19,878] DEBUG [Controller id=1] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=25, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=40). (kafka.controller.KafkaController)
[2023-12-04 18:15:19,885] DEBUG [Controller id=1] Updating ISRs for partitions: Set(failureTopic-3, ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-1, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-04 18:15:19,997] DEBUG [Controller id=1] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=24, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=39). (kafka.controller.KafkaController)
[2023-12-04 18:15:19,998] DEBUG [Controller id=1] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=25, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=40). (kafka.controller.KafkaController)
[2023-12-04 18:15:19,998] DEBUG [Controller id=1] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=25, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=40). (kafka.controller.KafkaController)
[2023-12-04 18:15:19,998] DEBUG [Controller id=1] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=24, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=39). (kafka.controller.KafkaController)
[2023-12-04 18:15:19,998] DEBUG [Controller id=1] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=25, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=40). (kafka.controller.KafkaController)
[2023-12-04 18:15:19,998] DEBUG [Controller id=1] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=25, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=40). (kafka.controller.KafkaController)
[2023-12-04 18:15:19,998] DEBUG [Controller id=1] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=24, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=39). (kafka.controller.KafkaController)
[2023-12-04 18:15:20,118] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2023-12-04 18:15:20,129] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-12-04 18:15:20,130] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 18:15:20,130] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 18:15:20,130] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2023-12-04 18:15:20,166] INFO [Controller id=1] Newly added brokers: 0, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-12-04 18:15:20,166] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-12-04 18:15:20,168] DEBUG [Controller id=0] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-04 18:15:20,171] INFO [Controller id=1] New broker startup callback for 0 (kafka.controller.KafkaController)
[2023-12-04 18:15:20,171] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-12-04 18:15:20,173] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 18:15:20,207] DEBUG [Controller id=1] Register BrokerModifications handler for List(0) (kafka.controller.KafkaController)
[2023-12-04 18:15:20,208] INFO [Controller id=1] Updated broker epochs cache: HashMap(0 -> 1319, 1 -> 1235, 2 -> 1293) (kafka.controller.KafkaController)
[2023-12-04 18:15:20,220] DEBUG [Controller id=1] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-12-04 18:15:20,223] DEBUG [Controller id=1] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=25, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=41). (kafka.controller.KafkaController)
[2023-12-04 18:15:20,228] DEBUG [Controller id=1] Updating ISRs for partitions: Set(ordersTopic-1, failureTopic-1, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-04 18:15:20,233] DEBUG [Controller id=1] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=25, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=41). (kafka.controller.KafkaController)
[2023-12-04 18:15:20,233] DEBUG [Controller id=1] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=25, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=41). (kafka.controller.KafkaController)
[2023-12-04 18:15:20,233] DEBUG [Controller id=1] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=25, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=41). (kafka.controller.KafkaController)
[2023-12-04 18:15:20,239] DEBUG [Controller id=1] Updating ISRs for partitions: Set(ordersTopic-0). (kafka.controller.KafkaController)
[2023-12-04 18:15:20,242] DEBUG [Controller id=1] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=25, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=41). (kafka.controller.KafkaController)
[2023-12-04 18:15:21,240] DEBUG [Controller id=1] Updating ISRs for partitions: Set(failureTopic-3). (kafka.controller.KafkaController)
[2023-12-04 18:15:21,243] DEBUG [Controller id=1] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=24, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=40). (kafka.controller.KafkaController)
[2023-12-04 18:15:21,246] DEBUG [Controller id=1] Updating ISRs for partitions: Set(failureTopic-0, ordersTopic-2). (kafka.controller.KafkaController)
[2023-12-04 18:15:21,249] DEBUG [Controller id=1] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=24, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=40). (kafka.controller.KafkaController)
[2023-12-04 18:15:21,249] DEBUG [Controller id=1] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=24, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=40). (kafka.controller.KafkaController)
[2023-12-04 18:15:24,780] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 18:15:24,780] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 18:15:24,781] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap(ordersTopic-3 -> List(0, 2, 1), failureTopic-1 -> List(0, 2, 1), ordersTopic-0 -> List(0, 1, 2)) (kafka.controller.KafkaController)
[2023-12-04 18:15:24,781] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.15 (kafka.controller.KafkaController)
[2023-12-04 18:15:24,781] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions ordersTopic-3,failureTopic-1,ordersTopic-0 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-04 18:15:24,787] INFO [Controller id=1] Partition ordersTopic-3 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-12-04 18:15:24,787] INFO [Controller id=1] Partition failureTopic-1 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-12-04 18:15:24,787] INFO [Controller id=1] Partition ordersTopic-0 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-12-04 18:15:24,787] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 18:15:24,787] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 18:15:24,788] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap(failureTopic-2 -> List(2, 1, 0), ordersTopic-1 -> List(2, 0, 1)) (kafka.controller.KafkaController)
[2023-12-04 18:15:24,788] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.1111111111111111 (kafka.controller.KafkaController)
[2023-12-04 18:15:24,788] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions failureTopic-2,ordersTopic-1 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-04 18:15:24,798] INFO [Controller id=1] Partition failureTopic-2 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-12-04 18:15:24,798] INFO [Controller id=1] Partition ordersTopic-1 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-12-04 19:30:58,822] DEBUG [Controller id=1] Resigning (kafka.controller.KafkaController)
[2023-12-04 19:30:58,845] DEBUG [Controller id=1] Unregister BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2023-12-04 19:30:58,846] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 19:30:58,846] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 19:30:58,846] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 19:30:58,847] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 19:30:58,847] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 19:30:58,849] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 19:30:58,849] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 19:30:58,849] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 19:30:58,851] INFO [RequestSendThread controllerId=1] Shutting down (kafka.controller.RequestSendThread)
[2023-12-04 19:30:58,851] INFO [RequestSendThread controllerId=1] Stopped (kafka.controller.RequestSendThread)
[2023-12-04 19:30:58,851] INFO [RequestSendThread controllerId=1] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-04 19:30:58,853] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)
[2023-12-04 19:30:58,849] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2023-12-04 19:30:58,868] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-12-04 19:30:58,874] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 19:30:58,874] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 19:30:58,878] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2023-12-04 19:30:58,923] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 12 and epoch zk version is now 12 (kafka.controller.KafkaController)
[2023-12-04 19:30:58,924] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2023-12-04 19:30:58,926] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-12-04 19:30:58,927] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-12-04 19:30:58,928] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2023-12-04 19:30:58,929] INFO [Controller id=1] Initialized broker epochs cache: HashMap(1 -> 1354) (kafka.controller.KafkaController)
[2023-12-04 19:30:58,933] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2023-12-04 19:30:58,963] DEBUG [Controller id=0] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-04 19:30:58,963] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-12-04 19:30:58,966] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2023-12-04 19:30:58,966] INFO [Controller id=1] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-12-04 19:30:58,966] INFO [Controller id=1] Current list of topics in the cluster: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.KafkaController)
[2023-12-04 19:30:58,966] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-12-04 19:30:58,970] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-12-04 19:30:58,970] INFO [Controller id=1] List of topics ineligible for deletion: ordersTopic,__consumer_offsets,failureTopic (kafka.controller.KafkaController)
[2023-12-04 19:30:58,970] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-12-04 19:30:58,970] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.TopicDeletionManager)
[2023-12-04 19:30:58,970] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2023-12-04 19:30:58,974] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 19:30:58,974] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 19:30:58,976] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 19:30:58,983] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-12-04 19:30:58,985] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 19:30:59,226] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2023-12-04 19:30:59,246] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2023-12-04 19:30:59,246] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 19:30:59,246] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 19:30:59,247] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2023-12-04 19:30:59,260] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=1] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-12-04 19:30:59,261] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 19:30:59,261] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 19:30:59,344] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OfflinePartition, __consumer_offsets-46 -> OfflinePartition, __consumer_offsets-9 -> OnlinePartition, __consumer_offsets-42 -> OnlinePartition, __consumer_offsets-21 -> OnlinePartition, ordersTopic-0 -> OnlinePartition, failureTopic-0 -> OnlinePartition, __consumer_offsets-17 -> OfflinePartition, __consumer_offsets-30 -> OnlinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-5 -> OfflinePartition, __consumer_offsets-38 -> OfflinePartition, __consumer_offsets-1 -> OfflinePartition, __consumer_offsets-34 -> OfflinePartition, __consumer_offsets-16 -> OfflinePartition, __consumer_offsets-45 -> OnlinePartition, __consumer_offsets-12 -> OnlinePartition, __consumer_offsets-41 -> OfflinePartition, __consumer_offsets-24 -> OnlinePartition, ordersTopic-1 -> OnlinePartition, __consumer_offsets-20 -> OfflinePartition, __consumer_offsets-49 -> OfflinePartition, failureTopic-1 -> OnlinePartition, __consumer_offsets-0 -> OnlinePartition, __consumer_offsets-29 -> OfflinePartition, __consumer_offsets-25 -> OfflinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-37 -> OfflinePartition, __consumer_offsets-4 -> OfflinePartition, __consumer_offsets-33 -> OnlinePartition, __consumer_offsets-15 -> OnlinePartition, __consumer_offsets-48 -> OnlinePartition, __consumer_offsets-11 -> OfflinePartition, __consumer_offsets-44 -> OfflinePartition, __consumer_offsets-23 -> OfflinePartition, __consumer_offsets-19 -> OfflinePartition, ordersTopic-2 -> OnlinePartition, failureTopic-2 -> OnlinePartition, __consumer_offsets-32 -> OfflinePartition, __consumer_offsets-28 -> OfflinePartition, __consumer_offsets-7 -> OfflinePartition, __consumer_offsets-40 -> OfflinePartition, __consumer_offsets-3 -> OnlinePartition, __consumer_offsets-36 -> OnlinePartition, __consumer_offsets-47 -> OfflinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-43 -> OfflinePartition, __consumer_offsets-10 -> OfflinePartition, failureTopic-3 -> OnlinePartition, __consumer_offsets-22 -> OfflinePartition, ordersTopic-3 -> OnlinePartition, __consumer_offsets-18 -> OnlinePartition, __consumer_offsets-31 -> OfflinePartition, __consumer_offsets-27 -> OnlinePartition, __consumer_offsets-39 -> OnlinePartition, __consumer_offsets-6 -> OnlinePartition, __consumer_offsets-35 -> OfflinePartition, __consumer_offsets-2 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-12-04 19:30:59,344] INFO [Controller id=1] Ready to serve as the new controller with epoch 12 (kafka.controller.KafkaController)
[2023-12-04 19:30:59,346] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-12-04 19:30:59,346] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-12-04 19:30:59,346] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-12-04 19:30:59,346] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-12-04 19:30:59,346] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-12-04 19:30:59,350] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-12-04 19:30:59,362] INFO [Controller id=1] Newly added brokers: 0, deleted brokers: , bounced brokers: , all live brokers: 0,1 (kafka.controller.KafkaController)
[2023-12-04 19:30:59,362] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-12-04 19:30:59,466] INFO [Controller id=1] New broker startup callback for 0 (kafka.controller.KafkaController)
[2023-12-04 19:30:59,496] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-12-04 19:30:59,498] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 19:30:59,524] DEBUG [Controller id=1] Register BrokerModifications handler for List(0) (kafka.controller.KafkaController)
[2023-12-04 19:30:59,527] INFO [Controller id=1] Updated broker epochs cache: HashMap(0 -> 1357, 1 -> 1354) (kafka.controller.KafkaController)
[2023-12-04 19:30:59,533] INFO [Controller id=1] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-12-04 19:30:59,533] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-12-04 19:30:59,557] DEBUG [Controller id=2] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-04 19:30:59,579] INFO [Controller id=1] New broker startup callback for 2 (kafka.controller.KafkaController)
[2023-12-04 19:30:59,597] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2023-12-04 19:31:01,125] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-04 19:31:01,163] DEBUG [Controller id=1] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2023-12-04 19:31:01,170] INFO [Controller id=1] Updated broker epochs cache: HashMap(0 -> 1357, 1 -> 1354, 2 -> 1414) (kafka.controller.KafkaController)
[2023-12-04 19:31:01,667] DEBUG [Controller id=1] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,670] DEBUG [Controller id=1] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=29, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=46). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,694] DEBUG [Controller id=1] Updating ISRs for partitions: Set(failureTopic-3, ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,704] DEBUG [Controller id=1] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=26, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=43). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,704] DEBUG [Controller id=1] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=29, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=46). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,704] DEBUG [Controller id=1] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=26, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=43). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,704] DEBUG [Controller id=1] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=29, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=46). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,704] DEBUG [Controller id=1] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=29, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=46). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,704] DEBUG [Controller id=1] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=26, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=43). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,717] DEBUG [Controller id=1] Updating ISRs for partitions: Set(ordersTopic-3). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,720] DEBUG [Controller id=1] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=29, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=47). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,725] DEBUG [Controller id=1] Updating ISRs for partitions: Set(failureTopic-3, ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,732] DEBUG [Controller id=1] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=26, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=44). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,732] DEBUG [Controller id=1] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=29, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=47). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,732] DEBUG [Controller id=1] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=26, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=44). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,732] DEBUG [Controller id=1] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=29, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=47). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,732] DEBUG [Controller id=1] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=29, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=47). (kafka.controller.KafkaController)
[2023-12-04 19:31:01,732] DEBUG [Controller id=1] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=26, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=44). (kafka.controller.KafkaController)
[2023-12-04 19:31:02,171] DEBUG [Controller id=1] Updating ISRs for partitions: Set(failureTopic-1). (kafka.controller.KafkaController)
[2023-12-04 19:31:02,174] DEBUG [Controller id=1] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=29, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=46). (kafka.controller.KafkaController)
[2023-12-04 19:31:02,233] DEBUG [Controller id=1] Updating ISRs for partitions: Set(failureTopic-1). (kafka.controller.KafkaController)
[2023-12-04 19:31:02,237] DEBUG [Controller id=1] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=29, isr=List(1, 2, 0), leaderRecoveryState=RECOVERED, partitionEpoch=47). (kafka.controller.KafkaController)
[2023-12-04 19:31:04,357] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 19:31:04,357] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 19:31:04,358] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap(ordersTopic-3 -> List(0, 2, 1), failureTopic-1 -> List(0, 2, 1), ordersTopic-0 -> List(0, 1, 2)) (kafka.controller.KafkaController)
[2023-12-04 19:31:04,358] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.15 (kafka.controller.KafkaController)
[2023-12-04 19:31:04,358] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions ordersTopic-3,failureTopic-1,ordersTopic-0 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-04 19:31:04,363] INFO [Controller id=1] Partition ordersTopic-3 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-12-04 19:31:04,363] INFO [Controller id=1] Partition failureTopic-1 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-12-04 19:31:04,363] INFO [Controller id=1] Partition ordersTopic-0 completed preferred replica leader election. New leader is 0 (kafka.controller.KafkaController)
[2023-12-04 19:31:04,363] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:31:04,363] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:31:04,363] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap(failureTopic-2 -> List(2, 1, 0), ordersTopic-1 -> List(2, 0, 1)) (kafka.controller.KafkaController)
[2023-12-04 19:31:04,363] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.1111111111111111 (kafka.controller.KafkaController)
[2023-12-04 19:31:04,364] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions failureTopic-2,ordersTopic-1 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-04 19:31:04,374] INFO [Controller id=1] Partition failureTopic-2 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-12-04 19:31:04,374] INFO [Controller id=1] Partition ordersTopic-1 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-12-04 19:36:04,387] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 19:36:04,387] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 19:36:04,388] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:36:04,388] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:36:04,388] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:36:04,388] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:36:04,388] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:36:04,388] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:41:04,392] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 19:41:04,392] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 19:41:04,393] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:41:04,393] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:41:04,393] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:41:04,393] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:41:04,393] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:41:04,393] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:46:04,400] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 19:46:04,400] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 19:46:04,401] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:46:04,401] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:46:04,401] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:46:04,401] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:46:04,401] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:46:04,401] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:51:04,413] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 19:51:04,413] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 19:51:04,414] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:51:04,414] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:51:04,414] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:51:04,414] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:51:04,415] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:51:04,415] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:56:04,428] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 19:56:04,428] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 19:56:04,429] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:56:04,429] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:56:04,429] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:56:04,431] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 19:56:04,431] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 19:56:04,431] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:01:04,437] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 20:01:04,438] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 20:01:04,439] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:01:04,439] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:01:04,439] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:01:04,439] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:01:04,439] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:01:04,439] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:06:04,445] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 20:06:04,445] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 20:06:04,446] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:06:04,446] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:06:04,446] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:06:04,446] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:06:04,446] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:06:04,446] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:11:04,458] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 20:11:04,458] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 20:11:04,458] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:11:04,458] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:11:04,458] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:11:04,458] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:11:04,458] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:11:04,458] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:16:04,461] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 20:16:04,461] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 20:16:04,462] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:16:04,462] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:16:04,462] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:16:04,462] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:16:04,462] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:16:04,462] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:21:04,474] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 20:21:04,474] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 20:21:04,476] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:21:04,476] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:21:04,476] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:21:04,476] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:21:04,476] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:21:04,476] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:26:04,477] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 20:26:04,477] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 20:26:04,479] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:26:04,479] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:26:04,479] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:26:04,479] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:26:04,479] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:26:04,479] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:31:04,483] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 20:31:04,483] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 20:31:04,484] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:31:04,484] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:31:04,484] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:31:04,484] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:31:04,484] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:31:04,484] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:36:04,495] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 20:36:04,495] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 20:36:04,496] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:36:04,496] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:36:04,496] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:36:04,496] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:36:04,496] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:36:04,496] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:41:04,500] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 20:41:04,500] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 20:41:04,501] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:41:04,501] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:41:04,501] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:41:04,501] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:41:04,501] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:41:04,501] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:46:04,502] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 20:46:04,502] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 20:46:04,503] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:46:04,503] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:46:04,503] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:46:04,503] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:46:04,503] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:46:04,503] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:51:04,518] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 20:51:04,518] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 20:51:04,519] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:51:04,519] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:51:04,519] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:51:04,519] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:51:04,519] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:51:04,519] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:56:04,524] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 20:56:04,524] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 20:56:04,526] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:56:04,526] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:56:04,526] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:56:04,526] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 20:56:04,526] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 20:56:04,526] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:01:04,541] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 21:01:04,543] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 21:01:04,544] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:01:04,544] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:01:04,545] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:01:04,545] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:01:04,545] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:01:04,545] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:06:04,557] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 21:06:04,557] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 21:06:04,558] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:06:04,558] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:06:04,558] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:06:04,558] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:06:04,558] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:06:04,558] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:11:04,562] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 21:11:04,562] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 21:11:04,562] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:11:04,562] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:11:04,562] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:11:04,562] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:11:04,562] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:11:04,563] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:16:04,570] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 21:16:04,570] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 21:16:04,572] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:16:04,572] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:16:04,572] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:16:04,572] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:16:04,572] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:16:04,572] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:21:04,583] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 21:21:04,583] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 21:21:04,584] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:21:04,584] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:21:04,584] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:21:04,584] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:21:04,584] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:21:04,584] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:26:04,590] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 21:26:04,590] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 21:26:04,591] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:26:04,591] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:26:04,591] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:26:04,591] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:26:04,591] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:26:04,591] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:31:04,599] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 21:31:04,599] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 21:31:04,599] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:31:04,599] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:31:04,599] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:31:04,599] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:31:04,599] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:31:04,599] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:36:04,608] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 21:36:04,608] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 21:36:04,609] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:36:04,609] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:36:04,609] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:36:04,609] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:36:04,609] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:36:04,609] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:41:04,615] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 21:41:04,615] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 21:41:04,615] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:41:04,615] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:41:04,615] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:41:04,615] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:41:04,615] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:41:04,615] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:46:04,624] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 21:46:04,624] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 21:46:04,625] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:46:04,625] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:46:04,625] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:46:04,625] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:46:04,625] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:46:04,625] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:51:04,640] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 21:51:04,640] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 21:51:04,641] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:51:04,641] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:51:04,641] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:51:04,641] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:51:04,641] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:51:04,641] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:56:04,653] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 21:56:04,653] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 21:56:04,654] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:56:04,655] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:56:04,655] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:56:04,655] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 21:56:04,655] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 21:56:04,655] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:01:04,661] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 22:01:04,662] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 22:01:04,662] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:01:04,662] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:01:04,662] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:01:04,662] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:01:04,662] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:01:04,662] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:06:04,664] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 22:06:04,664] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 22:06:04,665] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:06:04,665] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:06:04,665] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:06:04,665] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:06:04,665] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:06:04,665] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:11:04,680] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 22:11:04,680] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 22:11:04,680] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:11:04,680] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:11:04,680] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:11:04,680] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:11:04,681] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:11:04,681] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:16:04,693] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 22:16:04,693] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 22:16:04,694] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:16:04,694] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:16:04,694] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:16:04,694] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:16:04,694] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:16:04,694] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:21:04,706] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 22:21:04,706] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 22:21:04,706] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:21:04,706] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:21:04,706] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:21:04,706] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:21:04,706] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:21:04,706] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:26:04,712] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 22:26:04,712] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 22:26:04,713] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:26:04,713] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:26:04,713] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:26:04,713] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:26:04,713] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:26:04,713] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:31:04,727] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 22:31:04,727] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 22:31:04,727] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:31:04,727] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:31:04,727] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:31:04,727] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:31:04,728] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:31:04,728] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:36:04,734] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 22:36:04,734] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 22:36:04,735] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:36:04,735] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:36:04,735] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:36:04,735] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:36:04,735] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:36:04,735] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:41:04,738] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 22:41:04,738] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 22:41:04,740] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:41:04,740] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:41:04,740] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:41:04,740] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:41:04,740] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:41:04,740] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:46:04,749] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 22:46:04,749] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 22:46:04,749] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:46:04,750] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:46:04,750] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:46:04,750] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:46:04,750] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:46:04,750] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:51:04,752] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 22:51:04,752] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 22:51:04,752] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:51:04,752] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:51:04,752] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:51:04,752] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:51:04,752] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:51:04,752] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:56:04,762] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 22:56:04,762] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 22:56:04,763] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:56:04,763] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:56:04,763] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:56:04,763] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 22:56:04,763] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 22:56:04,763] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 23:01:04,778] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-04 23:01:04,781] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-04 23:01:04,781] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-04 23:01:04,782] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 23:01:04,782] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-04 23:01:04,782] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-04 23:01:04,782] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-04 23:01:04,782] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2023-12-06 15:18:08,278] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-12-06 15:18:08,330] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 13 and epoch zk version is now 13 (kafka.controller.KafkaController)
[2023-12-06 15:18:08,335] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2023-12-06 15:18:08,341] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-12-06 15:18:08,344] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-12-06 15:18:08,347] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2023-12-06 15:18:08,371] INFO [Controller id=0] Initialized broker epochs cache: HashMap(0 -> 1487) (kafka.controller.KafkaController)
[2023-12-06 15:18:08,390] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2023-12-06 15:18:08,443] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-12-06 15:18:08,452] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-12-06 15:18:08,454] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2023-12-06 15:18:08,454] INFO [Controller id=0] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-12-06 15:18:08,454] INFO [Controller id=0] Current list of topics in the cluster: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.KafkaController)
[2023-12-06 15:18:08,455] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-12-06 15:18:08,462] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-12-06 15:18:08,463] INFO [Controller id=0] List of topics ineligible for deletion: ordersTopic,__consumer_offsets,failureTopic (kafka.controller.KafkaController)
[2023-12-06 15:18:08,463] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-12-06 15:18:08,463] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.TopicDeletionManager)
[2023-12-06 15:18:08,465] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2023-12-06 15:18:08,488] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-12-06 15:18:08,507] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-06 15:18:08,512] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-06 15:18:08,630] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-06 15:18:08,817] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=2,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=1,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=3,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=2,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=1,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=0,Replica=0] -> OnlineReplica, [Topic=ordersTopic,Partition=3,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OnlineReplica, [Topic=failureTopic,Partition=1,Replica=2] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=1] -> OfflineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-12-06 15:18:08,818] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-12-06 15:18:08,834] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-12-06 15:18:08,962] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OnlinePartition, __consumer_offsets-46 -> OnlinePartition, __consumer_offsets-9 -> OfflinePartition, __consumer_offsets-42 -> OfflinePartition, __consumer_offsets-21 -> OfflinePartition, ordersTopic-0 -> OnlinePartition, failureTopic-0 -> OnlinePartition, __consumer_offsets-17 -> OfflinePartition, __consumer_offsets-30 -> OfflinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-5 -> OfflinePartition, __consumer_offsets-38 -> OfflinePartition, __consumer_offsets-1 -> OnlinePartition, __consumer_offsets-34 -> OnlinePartition, __consumer_offsets-16 -> OnlinePartition, __consumer_offsets-45 -> OfflinePartition, __consumer_offsets-12 -> OfflinePartition, __consumer_offsets-41 -> OfflinePartition, __consumer_offsets-24 -> OfflinePartition, ordersTopic-1 -> OnlinePartition, __consumer_offsets-20 -> OfflinePartition, __consumer_offsets-49 -> OnlinePartition, failureTopic-1 -> OnlinePartition, __consumer_offsets-0 -> OfflinePartition, __consumer_offsets-29 -> OfflinePartition, __consumer_offsets-25 -> OnlinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-37 -> OnlinePartition, __consumer_offsets-4 -> OnlinePartition, __consumer_offsets-33 -> OfflinePartition, __consumer_offsets-15 -> OfflinePartition, __consumer_offsets-48 -> OfflinePartition, __consumer_offsets-11 -> OfflinePartition, __consumer_offsets-44 -> OfflinePartition, __consumer_offsets-23 -> OfflinePartition, __consumer_offsets-19 -> OnlinePartition, ordersTopic-2 -> OnlinePartition, failureTopic-2 -> OnlinePartition, __consumer_offsets-32 -> OfflinePartition, __consumer_offsets-28 -> OnlinePartition, __consumer_offsets-7 -> OnlinePartition, __consumer_offsets-40 -> OnlinePartition, __consumer_offsets-3 -> OfflinePartition, __consumer_offsets-36 -> OfflinePartition, __consumer_offsets-47 -> OfflinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-43 -> OnlinePartition, __consumer_offsets-10 -> OnlinePartition, failureTopic-3 -> OnlinePartition, __consumer_offsets-22 -> OnlinePartition, ordersTopic-3 -> OnlinePartition, __consumer_offsets-18 -> OfflinePartition, __consumer_offsets-31 -> OnlinePartition, __consumer_offsets-27 -> OfflinePartition, __consumer_offsets-39 -> OfflinePartition, __consumer_offsets-6 -> OfflinePartition, __consumer_offsets-35 -> OfflinePartition, __consumer_offsets-2 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-12-06 15:18:08,962] INFO [Controller id=0] Ready to serve as the new controller with epoch 13 (kafka.controller.KafkaController)
[2023-12-06 15:18:08,974] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-12-06 15:18:08,975] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-12-06 15:18:08,975] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-12-06 15:18:08,976] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-12-06 15:18:08,977] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-12-06 15:18:09,008] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-12-06 15:18:14,012] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-06 15:18:14,012] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-06 15:18:14,016] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-06 15:18:14,016] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-06 15:18:14,017] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap(__consumer_offsets-30 -> List(1), __consumer_offsets-33 -> List(1), __consumer_offsets-36 -> List(1), __consumer_offsets-48 -> List(1), __consumer_offsets-0 -> List(1), __consumer_offsets-45 -> List(1), failureTopic-3 -> List(1, 2, 0), failureTopic-0 -> List(1, 0, 2), __consumer_offsets-21 -> List(1), __consumer_offsets-27 -> List(1), __consumer_offsets-9 -> List(1), __consumer_offsets-42 -> List(1), __consumer_offsets-3 -> List(1), __consumer_offsets-18 -> List(1), __consumer_offsets-15 -> List(1), __consumer_offsets-24 -> List(1), __consumer_offsets-6 -> List(1), ordersTopic-2 -> List(1, 2, 0), __consumer_offsets-39 -> List(1), __consumer_offsets-12 -> List(1)) (kafka.controller.KafkaController)
[2023-12-06 15:18:14,017] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 1.0 (kafka.controller.KafkaController)
[2023-12-06 15:18:14,018] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-06 15:18:14,018] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap(__consumer_offsets-8 -> List(2), failureTopic-2 -> List(2, 1, 0), __consumer_offsets-35 -> List(2), __consumer_offsets-47 -> List(2), __consumer_offsets-38 -> List(2), __consumer_offsets-17 -> List(2), __consumer_offsets-11 -> List(2), ordersTopic-1 -> List(2, 0, 1), __consumer_offsets-29 -> List(2), __consumer_offsets-32 -> List(2), __consumer_offsets-41 -> List(2), __consumer_offsets-23 -> List(2), __consumer_offsets-2 -> List(2), __consumer_offsets-14 -> List(2), __consumer_offsets-20 -> List(2), __consumer_offsets-44 -> List(2), __consumer_offsets-5 -> List(2), __consumer_offsets-26 -> List(2)) (kafka.controller.KafkaController)
[2023-12-06 15:18:14,018] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 1.0 (kafka.controller.KafkaController)
[2023-12-06 15:18:14,018] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-06 15:18:26,254] INFO [Controller id=0] Newly added brokers: 1, deleted brokers: , bounced brokers: , all live brokers: 0,1 (kafka.controller.KafkaController)
[2023-12-06 15:18:26,254] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-12-06 15:18:26,258] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-12-06 15:18:26,259] INFO [Controller id=0] New broker startup callback for 1 (kafka.controller.KafkaController)
[2023-12-06 15:18:26,266] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-06 15:18:26,307] DEBUG [Controller id=0] Register BrokerModifications handler for List(1) (kafka.controller.KafkaController)
[2023-12-06 15:18:26,309] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 1487, 1 -> 1559) (kafka.controller.KafkaController)
[2023-12-06 15:18:26,330] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-12-06 15:18:26,353] DEBUG [Controller id=1] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-06 15:18:26,802] DEBUG [Controller id=0] Updating ISRs for partitions: Set(failureTopic-3). (kafka.controller.KafkaController)
[2023-12-06 15:18:26,807] DEBUG [Controller id=0] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=0, leaderEpoch=29, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=48). (kafka.controller.KafkaController)
[2023-12-06 15:18:26,820] DEBUG [Controller id=0] Updating ISRs for partitions: Set(ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-1, ordersTopic-3, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-06 15:18:26,826] DEBUG [Controller id=0] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=0, leaderEpoch=32, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=51). (kafka.controller.KafkaController)
[2023-12-06 15:18:26,826] DEBUG [Controller id=0] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=0, leaderEpoch=29, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=48). (kafka.controller.KafkaController)
[2023-12-06 15:18:26,826] DEBUG [Controller id=0] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=0, leaderEpoch=33, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=52). (kafka.controller.KafkaController)
[2023-12-06 15:18:26,826] DEBUG [Controller id=0] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=0, leaderEpoch=32, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=51). (kafka.controller.KafkaController)
[2023-12-06 15:18:26,826] DEBUG [Controller id=0] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=0, leaderEpoch=29, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=48). (kafka.controller.KafkaController)
[2023-12-06 15:18:26,826] DEBUG [Controller id=0] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=0, leaderEpoch=33, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=52). (kafka.controller.KafkaController)
[2023-12-06 15:18:26,826] DEBUG [Controller id=0] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=0, leaderEpoch=32, isr=List(0, 1), leaderRecoveryState=RECOVERED, partitionEpoch=51). (kafka.controller.KafkaController)
[2023-12-06 15:18:44,269] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-12-06 15:18:44,291] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-06 15:18:51,623] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 14 and epoch zk version is now 14 (kafka.controller.KafkaController)
[2023-12-06 15:18:51,626] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2023-12-06 15:18:51,631] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-12-06 15:18:51,631] DEBUG [Controller id=1] Broker 2 was elected as controller instead of broker 1 (kafka.controller.KafkaController)
org.apache.kafka.common.errors.ControllerMovedException: Controller moved to another broker. Aborting controller startup procedure
[2023-12-06 15:18:51,634] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-12-06 15:18:51,639] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2023-12-06 15:18:51,648] INFO [Controller id=2] Initialized broker epochs cache: HashMap(1 -> 1559, 2 -> 1600) (kafka.controller.KafkaController)
[2023-12-06 15:18:51,661] DEBUG [Controller id=2] Register BrokerModifications handler for Set(1, 2) (kafka.controller.KafkaController)
[2023-12-06 15:18:51,697] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-12-06 15:18:51,705] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-12-06 15:18:51,709] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2023-12-06 15:18:51,709] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2023-12-06 15:18:51,711] INFO [Controller id=2] Currently active brokers in the cluster: Set(1, 2) (kafka.controller.KafkaController)
[2023-12-06 15:18:51,711] INFO [Controller id=2] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-12-06 15:18:51,712] INFO [Controller id=2] Current list of topics in the cluster: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.KafkaController)
[2023-12-06 15:18:51,713] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-12-06 15:18:51,719] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-12-06 15:18:51,719] INFO [Controller id=2] List of topics ineligible for deletion: ordersTopic,__consumer_offsets,failureTopic (kafka.controller.KafkaController)
[2023-12-06 15:18:51,720] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-12-06 15:18:51,720] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(ordersTopic, __consumer_offsets, failureTopic) (kafka.controller.TopicDeletionManager)
[2023-12-06 15:18:51,721] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2023-12-06 15:18:51,735] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-12-06 15:18:51,751] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-06 15:18:51,753] INFO [RequestSendThread controllerId=2] Controller 2 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-06 15:18:51,753] INFO [RequestSendThread controllerId=2] Controller 2 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-06 15:18:51,790] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-06 15:18:51,856] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=40,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=21,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=32,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=2,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=8,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=44,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=39,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=2,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=45,Replica=1] -> OnlineReplica, [Topic=ordersTopic,Partition=1,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=3,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=1] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=2] -> OnlineReplica, [Topic=failureTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=0,Replica=0] -> OfflineReplica, [Topic=ordersTopic,Partition=3,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=20,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=0,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OfflineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=38,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=33,Replica=1] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OfflineReplica, [Topic=failureTopic,Partition=1,Replica=2] -> OnlineReplica, [Topic=ordersTopic,Partition=0,Replica=1] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2023-12-06 15:18:51,857] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-12-06 15:18:51,862] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-12-06 15:18:51,940] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OfflinePartition, __consumer_offsets-46 -> OfflinePartition, __consumer_offsets-9 -> OnlinePartition, __consumer_offsets-42 -> OnlinePartition, __consumer_offsets-21 -> OnlinePartition, ordersTopic-0 -> OnlinePartition, failureTopic-0 -> OnlinePartition, __consumer_offsets-17 -> OnlinePartition, __consumer_offsets-30 -> OnlinePartition, __consumer_offsets-26 -> OnlinePartition, __consumer_offsets-5 -> OnlinePartition, __consumer_offsets-38 -> OnlinePartition, __consumer_offsets-1 -> OfflinePartition, __consumer_offsets-34 -> OfflinePartition, __consumer_offsets-16 -> OfflinePartition, __consumer_offsets-45 -> OnlinePartition, __consumer_offsets-12 -> OnlinePartition, __consumer_offsets-41 -> OnlinePartition, __consumer_offsets-24 -> OnlinePartition, ordersTopic-1 -> OnlinePartition, __consumer_offsets-20 -> OnlinePartition, __consumer_offsets-49 -> OfflinePartition, failureTopic-1 -> OnlinePartition, __consumer_offsets-0 -> OnlinePartition, __consumer_offsets-29 -> OnlinePartition, __consumer_offsets-25 -> OfflinePartition, __consumer_offsets-8 -> OnlinePartition, __consumer_offsets-37 -> OfflinePartition, __consumer_offsets-4 -> OfflinePartition, __consumer_offsets-33 -> OnlinePartition, __consumer_offsets-15 -> OnlinePartition, __consumer_offsets-48 -> OnlinePartition, __consumer_offsets-11 -> OnlinePartition, __consumer_offsets-44 -> OnlinePartition, __consumer_offsets-23 -> OnlinePartition, __consumer_offsets-19 -> OfflinePartition, ordersTopic-2 -> OnlinePartition, failureTopic-2 -> OnlinePartition, __consumer_offsets-32 -> OnlinePartition, __consumer_offsets-28 -> OfflinePartition, __consumer_offsets-7 -> OfflinePartition, __consumer_offsets-40 -> OfflinePartition, __consumer_offsets-3 -> OnlinePartition, __consumer_offsets-36 -> OnlinePartition, __consumer_offsets-47 -> OnlinePartition, __consumer_offsets-14 -> OnlinePartition, __consumer_offsets-43 -> OfflinePartition, __consumer_offsets-10 -> OfflinePartition, failureTopic-3 -> OnlinePartition, __consumer_offsets-22 -> OfflinePartition, ordersTopic-3 -> OnlinePartition, __consumer_offsets-18 -> OnlinePartition, __consumer_offsets-31 -> OfflinePartition, __consumer_offsets-27 -> OnlinePartition, __consumer_offsets-39 -> OnlinePartition, __consumer_offsets-6 -> OnlinePartition, __consumer_offsets-35 -> OnlinePartition, __consumer_offsets-2 -> OnlinePartition) (kafka.controller.ZkPartitionStateMachine)
[2023-12-06 15:18:51,941] INFO [Controller id=2] Ready to serve as the new controller with epoch 14 (kafka.controller.KafkaController)
[2023-12-06 15:18:51,949] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-12-06 15:18:51,949] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-12-06 15:18:51,949] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-12-06 15:18:51,950] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-12-06 15:18:51,951] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-12-06 15:18:51,965] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-12-06 15:18:52,189] DEBUG [Controller id=2] Updating ISRs for partitions: Set(failureTopic-3). (kafka.controller.KafkaController)
[2023-12-06 15:18:52,197] DEBUG [Controller id=2] ISR for partition failureTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=31, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=51). (kafka.controller.KafkaController)
[2023-12-06 15:18:52,227] DEBUG [Controller id=2] Updating ISRs for partitions: Set(ordersTopic-0, ordersTopic-1, failureTopic-0, ordersTopic-2, failureTopic-1, ordersTopic-3, failureTopic-2). (kafka.controller.KafkaController)
[2023-12-06 15:18:52,237] DEBUG [Controller id=2] ISR for partition ordersTopic-3 updated to LeaderAndIsr(leader=1, leaderEpoch=34, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=54). (kafka.controller.KafkaController)
[2023-12-06 15:18:52,237] DEBUG [Controller id=2] ISR for partition failureTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=31, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=51). (kafka.controller.KafkaController)
[2023-12-06 15:18:52,237] DEBUG [Controller id=2] ISR for partition failureTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=35, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=55). (kafka.controller.KafkaController)
[2023-12-06 15:18:52,237] DEBUG [Controller id=2] ISR for partition failureTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=34, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=54). (kafka.controller.KafkaController)
[2023-12-06 15:18:52,237] DEBUG [Controller id=2] ISR for partition ordersTopic-2 updated to LeaderAndIsr(leader=1, leaderEpoch=31, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=51). (kafka.controller.KafkaController)
[2023-12-06 15:18:52,237] DEBUG [Controller id=2] ISR for partition ordersTopic-1 updated to LeaderAndIsr(leader=1, leaderEpoch=35, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=55). (kafka.controller.KafkaController)
[2023-12-06 15:18:52,237] DEBUG [Controller id=2] ISR for partition ordersTopic-0 updated to LeaderAndIsr(leader=1, leaderEpoch=34, isr=List(1, 2), leaderRecoveryState=RECOVERED, partitionEpoch=54). (kafka.controller.KafkaController)
[2023-12-06 15:18:56,980] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-06 15:18:56,981] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-06 15:18:56,986] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 HashMap(__consumer_offsets-4 -> List(0), __consumer_offsets-25 -> List(0), __consumer_offsets-49 -> List(0), failureTopic-1 -> List(0, 2, 1), __consumer_offsets-31 -> List(0), __consumer_offsets-37 -> List(0), __consumer_offsets-19 -> List(0), __consumer_offsets-13 -> List(0), __consumer_offsets-43 -> List(0), __consumer_offsets-1 -> List(0), __consumer_offsets-34 -> List(0), __consumer_offsets-22 -> List(0), ordersTopic-3 -> List(0, 2, 1), __consumer_offsets-7 -> List(0), __consumer_offsets-46 -> List(0), __consumer_offsets-16 -> List(0), __consumer_offsets-28 -> List(0), __consumer_offsets-10 -> List(0), ordersTopic-0 -> List(0, 1, 2), __consumer_offsets-40 -> List(0)) (kafka.controller.KafkaController)
[2023-12-06 15:18:56,988] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 1.0 (kafka.controller.KafkaController)
[2023-12-06 15:18:56,989] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-06 15:18:56,989] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-06 15:18:56,989] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-06 15:18:56,989] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap(failureTopic-2 -> List(2, 1, 0), ordersTopic-1 -> List(2, 0, 1)) (kafka.controller.KafkaController)
[2023-12-06 15:18:56,989] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.1111111111111111 (kafka.controller.KafkaController)
[2023-12-06 15:18:56,989] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions failureTopic-2,ordersTopic-1 triggered by AutoTriggered (kafka.controller.KafkaController)
[2023-12-06 15:18:56,999] INFO [Controller id=2] Partition failureTopic-2 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-12-06 15:18:56,999] INFO [Controller id=2] Partition ordersTopic-1 completed preferred replica leader election. New leader is 2 (kafka.controller.KafkaController)
[2023-12-06 15:18:57,001] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:57,107] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:57,216] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:57,324] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:57,433] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:57,542] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:57,665] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:57,776] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:57,886] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:57,994] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:58,100] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:58,208] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:58,316] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:58,425] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:58,533] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:58,644] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:58,752] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:58,861] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:58,969] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:59,079] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:59,188] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:59,298] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:59,406] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:59,514] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:59,625] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:59,735] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:59,842] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:18:59,952] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:00,062] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:00,172] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:00,280] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:00,390] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:00,496] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:00,607] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:00,717] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:00,826] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:00,937] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:01,044] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:01,154] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:01,262] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:01,386] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:01,496] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:01,604] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:01,727] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:01,836] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:01,944] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:02,054] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:02,162] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:02,269] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:02,394] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:02,504] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:02,612] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:02,721] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:02,830] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:02,942] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:03,051] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:03,160] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:03,269] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:03,378] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:03,487] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:03,596] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:03,704] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:03,813] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:03,922] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:04,030] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:04,139] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:04,247] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:04,356] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:04,468] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:04,574] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:04,684] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:04,792] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:04,901] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:05,011] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:05,120] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:05,229] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:05,341] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:05,464] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:05,573] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:05,679] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:05,790] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:05,898] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:06,008] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:06,119] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:06,229] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:06,337] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:06,449] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:06,555] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:06,665] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:06,773] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:06,882] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:06,991] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:07,100] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:07,224] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:07,335] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:07,444] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:07,554] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:07,663] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:07,772] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:07,881] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:07,988] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:08,096] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:08,206] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:08,317] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:08,426] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:08,534] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:08,644] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:08,753] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:08,864] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:08,975] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:09,086] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:09,194] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:09,304] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:09,410] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:09,520] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:09,628] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:09,740] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:09,848] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:09,957] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:10,066] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:10,173] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:10,282] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:10,389] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:10,498] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:10,607] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:10,717] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:10,827] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:10,936] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:11,046] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:11,155] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:11,278] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:11,387] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:11,495] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:11,606] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:11,717] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:11,824] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:11,934] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:12,039] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:12,148] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:12,253] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:12,363] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:12,472] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:12,580] WARN [RequestSendThread controllerId=2] Controller 2's connection to broker localhost:9093 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to localhost:9093 (id: 1 rack: null) failed.
	at org.apache.kafka.clients.NetworkClientUtils.awaitReady(NetworkClientUtils.java:70)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:292)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:245)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:12,619] INFO [Controller id=2] Newly added brokers: , deleted brokers: 1, bounced brokers: , all live brokers: 2 (kafka.controller.KafkaController)
[2023-12-06 15:19:12,620] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2023-12-06 15:19:12,622] WARN [RequestSendThread controllerId=2] Controller 2 epoch 14 fails to send request (type=LeaderAndIsRequest, controllerId=2, controllerEpoch=14, brokerEpoch=1559, partitionStates=[LeaderAndIsrPartitionState(topicName='ordersTopic', partitionIndex=1, controllerEpoch=14, leader=2, leaderEpoch=36, isr=[1, 2], partitionEpoch=56, replicas=[2, 0, 1], addingReplicas=[], removingReplicas=[], isNew=false, leaderRecoveryState=0), LeaderAndIsrPartitionState(topicName='failureTopic', partitionIndex=2, controllerEpoch=14, leader=2, leaderEpoch=36, isr=[1, 2], partitionEpoch=56, replicas=[2, 1, 0], addingReplicas=[], removingReplicas=[], isNew=false, leaderRecoveryState=0)], topicIds={ordersTopic=JNAeffNIQQWAPgHTaBUSvA, failureTopic=Szy9wbL6QHWes-xWAREW-g}, liveLeaders=(localhost:9094 (id: 2 rack: null))) to broker localhost:9093 (id: 1 rack: null). Reconnecting to broker. (kafka.controller.RequestSendThread)
java.lang.InterruptedException
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1081)
	at java.base/java.util.concurrent.CountDownLatch.await(CountDownLatch.java:276)
	at kafka.utils.ShutdownableThread.pause(ShutdownableThread.scala:82)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:233)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)
[2023-12-06 15:19:12,622] TRACE [RequestSendThread controllerId=2] shutdownInitiated latch count reached zero. Shutdown called. (kafka.controller.RequestSendThread)
[2023-12-06 15:19:12,623] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2023-12-06 15:19:12,623] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2023-12-06 15:19:12,626] INFO [Controller id=2] Broker failure callback for 1 (kafka.controller.KafkaController)
[2023-12-06 15:19:12,684] DEBUG [Controller id=2] Unregister BrokerModifications handler for List(1) (kafka.controller.KafkaController)
[2023-12-06 15:19:12,685] INFO [Controller id=2] Updated broker epochs cache: HashMap(2 -> 1600) (kafka.controller.KafkaController)
[2023-12-06 15:25:58,450] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-12-06 15:25:58,492] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2023-12-06 15:25:58,499] INFO [Controller id=0] Creating FeatureZNode at path: /feature with contents: FeatureZNode(2,Enabled,Map()) (kafka.controller.KafkaController)
[2023-12-06 15:25:58,540] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2023-12-06 15:25:58,545] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-12-06 15:25:58,549] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-12-06 15:25:58,555] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2023-12-06 15:25:58,575] INFO [Controller id=0] Initialized broker epochs cache: HashMap(0 -> 25) (kafka.controller.KafkaController)
[2023-12-06 15:25:58,583] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2023-12-06 15:25:58,590] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-12-06 15:25:58,602] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-12-06 15:25:58,604] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2023-12-06 15:25:58,604] INFO [Controller id=0] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-12-06 15:25:58,605] INFO [Controller id=0] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-12-06 15:25:58,605] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-12-06 15:25:58,608] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-12-06 15:25:58,608] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2023-12-06 15:25:58,609] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-12-06 15:25:58,610] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)
[2023-12-06 15:25:58,613] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2023-12-06 15:25:58,629] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-12-06 15:25:58,630] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-06 15:25:58,639] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-12-06 15:25:58,640] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2023-12-06 15:25:58,641] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-12-06 15:25:58,641] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-06 15:25:58,648] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-12-06 15:25:58,653] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2023-12-06 15:25:58,654] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2023-12-06 15:25:58,662] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-12-06 15:25:58,662] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-12-06 15:25:58,663] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-12-06 15:25:58,663] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-12-06 15:25:58,664] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-12-06 15:25:58,683] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-12-06 15:26:03,691] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-06 15:26:03,692] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-06 15:26:05,965] INFO [Controller id=0] Newly added brokers: 1, deleted brokers: , bounced brokers: , all live brokers: 0,1 (kafka.controller.KafkaController)
[2023-12-06 15:26:05,966] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2023-12-06 15:26:05,972] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-12-06 15:26:05,975] INFO [Controller id=0] New broker startup callback for 1 (kafka.controller.KafkaController)
[2023-12-06 15:26:05,979] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-06 15:26:05,981] DEBUG [Controller id=0] Register BrokerModifications handler for List(1) (kafka.controller.KafkaController)
[2023-12-06 15:26:05,983] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 25, 1 -> 45) (kafka.controller.KafkaController)
[2023-12-06 15:26:06,038] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-12-06 15:26:06,057] DEBUG [Controller id=1] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-06 15:26:11,575] INFO [Controller id=0] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2023-12-06 15:26:11,575] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2023-12-06 15:26:11,580] INFO [Controller id=0] New broker startup callback for 2 (kafka.controller.KafkaController)
[2023-12-06 15:26:11,580] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-12-06 15:26:11,581] DEBUG [Controller id=0] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2023-12-06 15:26:11,584] INFO [RequestSendThread controllerId=0] Controller 0 connected to localhost:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-12-06 15:26:11,586] INFO [Controller id=0] Updated broker epochs cache: HashMap(0 -> 25, 1 -> 45, 2 -> 61) (kafka.controller.KafkaController)
[2023-12-06 15:26:11,653] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-12-06 15:26:11,676] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2023-12-06 15:26:44,937] INFO [Controller id=0] New topics: [Set(ordersTopic)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(ordersTopic,Some(y5amNEVdTpWNeMDh5XX7Ig),Map(ordersTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=), ordersTopic-1 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=), ordersTopic-2 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=), ordersTopic-3 -> ReplicaAssignment(replicas=1,2,0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-12-06 15:26:44,937] INFO [Controller id=0] New partition creation callback for ordersTopic-0,ordersTopic-1,ordersTopic-2,ordersTopic-3 (kafka.controller.KafkaController)
[2023-12-06 15:26:44,998] INFO [Controller id=0] New topics: [Set(failureTopic)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(failureTopic,Some(LmNnaFZKTEasY88q4jq4Kw),Map(failureTopic-0 -> ReplicaAssignment(replicas=2,0,1, addingReplicas=, removingReplicas=), failureTopic-1 -> ReplicaAssignment(replicas=1,2,0, addingReplicas=, removingReplicas=), failureTopic-2 -> ReplicaAssignment(replicas=0,1,2, addingReplicas=, removingReplicas=), failureTopic-3 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-12-06 15:26:44,999] INFO [Controller id=0] New partition creation callback for failureTopic-0,failureTopic-1,failureTopic-2,failureTopic-3 (kafka.controller.KafkaController)
[2023-12-06 15:28:08,061] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(__consumer_offsets,Some(bfHmzARkQ9q9GmK7Bc9idg),HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-12-06 15:28:08,062] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2023-12-06 15:29:27,208] DEBUG [Controller id=0] There is no producerId block yet (Zk path version 0), creating the first block (kafka.controller.KafkaController)
[2023-12-06 15:29:27,214] INFO [Controller id=0] Acquired new producerId block ProducerIdsBlock(assignedBrokerId=1, firstProducerId=0, size=1000) by writing to Zk with path version 1 (kafka.controller.KafkaController)
[2023-12-06 15:31:03,700] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-12-06 15:31:03,700] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-12-06 15:31:03,706] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-12-06 15:31:03,707] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-12-06 15:31:03,707] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2023-12-06 15:31:03,707] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2023-12-06 15:31:03,707] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2023-12-06 15:31:03,707] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
